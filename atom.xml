<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wiki</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wiki.jassassin.com/"/>
  <updated>2016-08-11T05:46:29.000Z</updated>
  <id>http://wiki.jassassin.com/</id>
  
  <author>
    <name>Jassassin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>curator apply</title>
    <link href="http://wiki.jassassin.com/2015/12/14/zookeeper/curator/"/>
    <id>http://wiki.jassassin.com/2015/12/14/zookeeper/curator/</id>
    <published>2015-12-14T06:40:44.000Z</published>
    <updated>2016-08-11T05:46:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文所有实验基于<a href="http://zookeeper.apache.org/doc/r3.4.6/" target="_blank" rel="external">Apache zookeeper-3.4.6</a>版本, Curator版本2.7.1.</p>
<h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>zookeeper原生支持通过注册Watcher来进行事件监听,但是其使用比较麻烦,需要开发人员自己反复注册Watcher.Curator引入Cache来实现对zookeeper服务器端事件的监听.Cache是Curator中对事件监听的包装,其对事件的监听可以近似看作是一个本地缓存视图和远程zookeeper视图的对比过程.同时curator能够自动为开发人员处理反复注册监听.Cache分为两种监听类型: 节点监听和子节点监听.</p>
<h3 id="节点监听"><a href="#节点监听" class="headerlink" title="节点监听"></a>节点监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 初始sleep时间(毫秒)</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_SLEEP_TIME = <span class="number">1000</span>;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 最大重试次数</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RETRIES_COUNT = <span class="number">5</span>;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 最大sleep时间</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SLEEP_TIME = <span class="number">60000</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECT_STRING = <span class="string">"127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIMEOUT = <span class="number">5000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONNECTION_TIMEOUT = <span class="number">5000</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		CuratorFramework client = initClient();</div><div class="line">		watchDataChanged(client);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 初始化客户端</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CuratorFramework <span class="title">initClient</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//1.设置重试策略,重试时间计算策略sleepMs = baseSleepTimeMs * Math.max(1, random.nextInt(1 &lt;&lt; (retryCount + 1)));</span></div><div class="line">		RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(BASE_SLEEP_TIME, MAX_RETRIES_COUNT, MAX_SLEEP_TIME);</div><div class="line"></div><div class="line">		<span class="comment">//2.使用Fluent风格初始化客户端</span></div><div class="line">		CuratorFramework client = CuratorFrameworkFactory.builder()</div><div class="line">									.connectString(CONNECT_STRING)</div><div class="line">									.sessionTimeoutMs(SESSION_TIMEOUT)</div><div class="line">									.connectionTimeoutMs(CONNECTION_TIMEOUT)</div><div class="line">									.retryPolicy(retryPolicy)</div><div class="line">									.namespace(<span class="string">"simple"</span>)		<span class="comment">//命名空间隔离</span></div><div class="line">									.build();</div><div class="line">		client.start();</div><div class="line">		<span class="keyword">return</span> client;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 监听节点数据变化</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">watchDataChanged</span><span class="params">(CuratorFramework client)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="comment">//1.创建目标监听节点</span></div><div class="line">		String path = client.create().creatingParentsIfNeeded().forPath(<span class="string">"/node1"</span>, <span class="string">"eagle"</span>.getBytes());</div><div class="line">		System.out.println(<span class="string">"success create path:"</span> + path);</div><div class="line"></div><div class="line">		<span class="comment">//2.添加监听器</span></div><div class="line">		<span class="keyword">final</span> NodeCache nodeCache = <span class="keyword">new</span> NodeCache(client, path);</div><div class="line">		nodeCache.getListenable().addListener(<span class="keyword">new</span> NodeCacheListener() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nodeChanged</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">				System.out.println(<span class="string">"node data changed, new data:"</span> + <span class="keyword">new</span> String(nodeCache.getCurrentData().getData()));</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		nodeCache.start(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">		<span class="comment">//3.更新数据</span></div><div class="line">		client.setData().forPath(path, <span class="string">"eagle_update"</span>.getBytes());</div><div class="line">		Thread.sleep(<span class="number">1000</span>);</div><div class="line"></div><div class="line">		<span class="comment">//4.再次更新</span></div><div class="line">		client.setData().forPath(path, <span class="string">"eagle_update_update"</span>.getBytes());</div><div class="line">		Thread.sleep(<span class="number">1000</span>);</div><div class="line"></div><div class="line">		<span class="comment">//4.删除节点</span></div><div class="line">		client.delete().deletingChildrenIfNeeded().forPath(path);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">success create path:/node1</div><div class="line">node data changed, new data:eagle_update</div><div class="line">node data changed, new data:eagle_update_update</div></pre></td></tr></table></figure></p>
<p>注:</p>
<pre><code>1. NodeCache.start(boolean buildInitial)方法中buildInitial参数默认为false,如果设置为true,那么NodeCache在第一次启动时就立刻从zookeeper上读取对应节点的数据内容,并保存在Cache中.
2. NodeCache不仅可以用于监听节点的内容变更,也能监听指定节点是否存在.如果原本节点不存在,那么Cache就会在节点被创建后触发NodeCacheListener.但,如果该数据节点被删除,那么Curator就无法触发该事件.
</code></pre><h3 id="子节点监听"><a href="#子节点监听" class="headerlink" title="子节点监听"></a>子节点监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 初始sleep时间(毫秒)</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_SLEEP_TIME = <span class="number">1000</span>;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 最大重试次数</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RETRIES_COUNT = <span class="number">5</span>;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 最大sleep时间</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SLEEP_TIME = <span class="number">60000</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECT_STRING = <span class="string">"127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIMEOUT = <span class="number">5000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONNECTION_TIMEOUT = <span class="number">5000</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		CuratorFramework client = initClient();</div><div class="line">		watchChildrenChanged(client);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 初始化客户端</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CuratorFramework <span class="title">initClient</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//1.设置重试策略,重试时间计算策略sleepMs = baseSleepTimeMs * Math.max(1, random.nextInt(1 &lt;&lt; (retryCount + 1)));</span></div><div class="line">		RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(BASE_SLEEP_TIME, MAX_RETRIES_COUNT, MAX_SLEEP_TIME);</div><div class="line"></div><div class="line">		<span class="comment">//2.使用Fluent风格初始化客户端</span></div><div class="line">		CuratorFramework client = CuratorFrameworkFactory.builder()</div><div class="line">														 .connectString(CONNECT_STRING)</div><div class="line">														 .sessionTimeoutMs(SESSION_TIMEOUT)</div><div class="line">														 .connectionTimeoutMs(CONNECTION_TIMEOUT)</div><div class="line">														 .retryPolicy(retryPolicy)</div><div class="line">														 .namespace(<span class="string">"simple"</span>)		<span class="comment">//命名空间隔离</span></div><div class="line">														 .build();</div><div class="line">		client.start();</div><div class="line">		<span class="keyword">return</span> client;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">watchChildrenChanged</span><span class="params">(CuratorFramework client)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="comment">//1.创建目标监听节点</span></div><div class="line">		String path = client.create().creatingParentsIfNeeded().forPath(<span class="string">"/node1"</span>, <span class="string">"eagle"</span>.getBytes());</div><div class="line">		System.out.println(<span class="string">"success create path:"</span> + path);</div><div class="line"></div><div class="line">		<span class="comment">//2.添加监听器</span></div><div class="line">		PathChildrenCache cache = <span class="keyword">new</span> PathChildrenCache(client, path, <span class="keyword">true</span>);</div><div class="line">		cache.start(StartMode.BUILD_INITIAL_CACHE);</div><div class="line">		cache.getListenable().addListener(<span class="keyword">new</span> PathChildrenCacheListener() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, PathChildrenCacheEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">				<span class="keyword">switch</span>(event.getType())&#123;</div><div class="line">					<span class="keyword">case</span>  CHILD_ADDED:</div><div class="line">						System.out.println(<span class="string">"CHILD_ADDED:"</span> + event.getData().getPath());</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">case</span> CHILD_REMOVED:</div><div class="line">						System.out.println(<span class="string">"CHILD_REMOVED:"</span> + event.getData().getPath());</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">case</span> CHILD_UPDATED:</div><div class="line">						System.out.println(<span class="string">"CHILD_UPDATED:"</span> + event.getData().getPath());</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">default</span>:</div><div class="line">						System.out.println(<span class="string">"event type:"</span> + event.getType());</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">		<span class="comment">//3.创建子节点</span></div><div class="line">		String result = client.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(path + <span class="string">"/c1"</span>);</div><div class="line">		System.out.println(<span class="string">"success create path:"</span> + result);</div><div class="line"></div><div class="line">		Thread.sleep(<span class="number">2000</span>);</div><div class="line"></div><div class="line">		<span class="comment">//4.创建二级子节点</span></div><div class="line">		String result2 = client.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(result + <span class="string">"/c2"</span>);</div><div class="line">		System.out.println(<span class="string">"success create path:"</span> + result2);</div><div class="line"></div><div class="line">		Thread.sleep(<span class="number">2000</span>);</div><div class="line"></div><div class="line">		<span class="comment">//5.删除子节点</span></div><div class="line">		client.delete().deletingChildrenIfNeeded().forPath(result);</div><div class="line">		System.out.println(<span class="string">"success delete path:"</span> + result);</div><div class="line"></div><div class="line">		Thread.sleep(<span class="number">2000</span>);</div><div class="line"></div><div class="line">		<span class="comment">//6.删除节点</span></div><div class="line">		client.delete().forPath(path);</div><div class="line">		System.out.println(<span class="string">"success delete path:"</span> + path);</div><div class="line"></div><div class="line">		Thread.sleep(<span class="number">2000</span>);</div><div class="line"></div><div class="line">		cache.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">success create path:/node1</div><div class="line">success create path:/node1/c1</div><div class="line">CHILD_ADDED:/node1/c1</div><div class="line">success create path:/node1/c1/c2</div><div class="line">CHILD_REMOVED:/node1/c1</div><div class="line">success delete path:/node1/c1</div><div class="line">success delete path:/node1</div></pre></td></tr></table></figure></p>
<p><strong> 由前面结果可以看出子节点监听,只对一级子节点的变更有效.当创建/node1/c1/c2时并未触发通知.同时,被检测的节点数据变更也不触发通知 </strong></p>
<h2 id="Master选举"><a href="#Master选举" class="headerlink" title="Master选举"></a>Master选举</h2><p>通过zookeeper实现master选择思路: 选择一个根节点如/master_select,多台机器同时向该节点创建一个子节点/master_select/lock,利用zookeeper的特性,最终只有一台机器能够创建成功,成功的那台机器就作为Master.</p>
<p>Curator也是基于此思路,但是其将节点创建,事件监听和自动选举进行了封装.</p>
<p>多线程模拟Master选举:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterSelectedDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_SLEEP_TIME = <span class="number">1000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RETRIES_COUNT = <span class="number">5</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SLEEP_TIME = <span class="number">60000</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECT_STRING = <span class="string">"127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIMEOUT = <span class="number">5000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONNECTION_TIMEOUT = <span class="number">5000</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MASTER_PATH = <span class="string">"/master_lock"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">final</span> CuratorFramework client = initClient();</div><div class="line"></div><div class="line">		ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</div><div class="line">			executorService.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line"></div><div class="line">						LeaderSelector leaderSelector = <span class="keyword">new</span> LeaderSelector(client, MASTER_PATH, <span class="keyword">new</span> LeaderSelectorListenerAdapter() &#123;</div><div class="line"></div><div class="line">							<span class="comment">/**</span></div><div class="line">							 * Curator会在该线程被成功选取为master时回调该方法.同时,当该方法执行完毕之后,Curator会自动释放master权利,然后重新开始新一轮的选举</div><div class="line">							 */</div><div class="line">							<span class="meta">@Override</span></div><div class="line">							<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeLeadership</span><span class="params">(CuratorFramework client)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">								System.out.println(<span class="string">"Thread:"</span> + Thread.currentThread().getId() + <span class="string">" be selected as Master!"</span>);</div><div class="line">								<span class="keyword">try</span>&#123;</div><div class="line">									Thread.sleep(<span class="number">3000</span>);</div><div class="line">								&#125;<span class="keyword">catch</span>(Throwable e)&#123;</div><div class="line"></div><div class="line">								&#125;</div><div class="line">								System.out.println(<span class="string">"Thread:"</span> + Thread.currentThread().getName() + <span class="string">" release master right!"</span>);</div><div class="line">							&#125;</div><div class="line">						&#125;);</div><div class="line"></div><div class="line">						<span class="comment">//By default, when LeaderSelectorListener.takeLeadership(CuratorFramework) returns, this instance is not requeued.</span></div><div class="line">						<span class="comment">//Calling this method puts the leader selector into a mode where it will always requeue itself.</span></div><div class="line">						leaderSelector.autoRequeue();</div><div class="line"></div><div class="line">						<span class="comment">//Attempt leadership. This attempt is done in the background - i.e. this method returns immediately.</span></div><div class="line">						leaderSelector.start();</div><div class="line"></div><div class="line">						<span class="keyword">try</span> &#123;</div><div class="line">							Thread.sleep(<span class="number">3000</span>);</div><div class="line">						&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">							e.printStackTrace();</div><div class="line">						&#125;</div><div class="line"></div><div class="line">						<span class="comment">//Shutdown this selector and remove yourself from the leadership group</span></div><div class="line">						leaderSelector.close();</div><div class="line">					&#125;</div><div class="line">				&#125;;</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		executorService.shutdown();</div><div class="line"></div><div class="line">		Thread.sleep(<span class="number">30000</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 初始化客户端</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CuratorFramework <span class="title">initClient</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//1.设置重试策略,重试时间计算策略sleepMs = baseSleepTimeMs * Math.max(1, random.nextInt(1 &lt;&lt; (retryCount + 1)));</span></div><div class="line">		RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(BASE_SLEEP_TIME, MAX_RETRIES_COUNT, MAX_SLEEP_TIME);</div><div class="line"></div><div class="line">		<span class="comment">//2.使用Fluent风格初始化客户端</span></div><div class="line">		CuratorFramework client = CuratorFrameworkFactory.builder()</div><div class="line">									.connectString(CONNECT_STRING)</div><div class="line">									.sessionTimeoutMs(SESSION_TIMEOUT)</div><div class="line">									.connectionTimeoutMs(CONNECTION_TIMEOUT)</div><div class="line">									.retryPolicy(retryPolicy)</div><div class="line">									.namespace(<span class="string">"simple"</span>)		<span class="comment">//命名空间隔离</span></div><div class="line">									.build();</div><div class="line">		client.start();</div><div class="line">		<span class="keyword">return</span> client;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Thread:24 be selected as Master!</div><div class="line">Thread:Curator-LeaderSelector-3 release master right!</div><div class="line">Thread:30 be selected as Master!</div><div class="line">Thread:Curator-LeaderSelector-10 release master right!</div><div class="line">Thread:37 be selected as Master!</div><div class="line">Thread:Curator-LeaderSelector-16 release master right!</div><div class="line">Thread:45 be selected as Master!</div><div class="line">Thread:Curator-LeaderSelector-24 release master right!</div><div class="line">Thread:53 be selected as Master!</div><div class="line">Thread:Curator-LeaderSelector-32 release master right!</div><div class="line">Thread:62 be selected as Master!</div></pre></td></tr></table></figure>
<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p><a href="http://ifeve.com/zookeeper-lock/" target="_blank" rel="external">跟着实例学习ZooKeeper的用法：分布式锁</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * curator分布式锁</div><div class="line"> * <span class="doctag">@author</span> eagle</div><div class="line"> * <span class="doctag">@date</span> 2015年12月16日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorLock</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_SLEEP_TIME = <span class="number">1000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RETRIES_COUNT = <span class="number">5</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SLEEP_TIME = <span class="number">60000</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECT_STRING = <span class="string">"127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIMEOUT = <span class="number">5000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONNECTION_TIMEOUT = <span class="number">5000</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MASTER_PATH = <span class="string">"/master_lock"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">		CuratorFramework client = initClient();</div><div class="line"></div><div class="line">		<span class="keyword">final</span> InterProcessLock lock = <span class="keyword">new</span> InterProcessMutex(client, MASTER_PATH);</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						countDownLatch.await();</div><div class="line">						lock.acquire();</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss|SSS"</span>);</div><div class="line">					String date = format.format(<span class="keyword">new</span> Date());</div><div class="line">					System.out.println(<span class="string">"generate number:"</span> + date);</div><div class="line"></div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						lock.release();</div><div class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;).start();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		countDownLatch.countDown();</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 初始化客户端</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CuratorFramework <span class="title">initClient</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//1.设置重试策略,重试时间计算策略sleepMs = baseSleepTimeMs * Math.max(1, random.nextInt(1 &lt;&lt; (retryCount + 1)));</span></div><div class="line">		RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(BASE_SLEEP_TIME, MAX_RETRIES_COUNT, MAX_SLEEP_TIME);</div><div class="line"></div><div class="line">		<span class="comment">//2.使用Fluent风格初始化客户端</span></div><div class="line">		CuratorFramework client = CuratorFrameworkFactory.builder()</div><div class="line">									.connectString(CONNECT_STRING)</div><div class="line">									.sessionTimeoutMs(SESSION_TIMEOUT)</div><div class="line">									.connectionTimeoutMs(CONNECTION_TIMEOUT)</div><div class="line">									.retryPolicy(retryPolicy)</div><div class="line">									.namespace(<span class="string">"simple"</span>)		<span class="comment">//命名空间隔离</span></div><div class="line">									.build();</div><div class="line">		client.start();</div><div class="line">		<span class="keyword">return</span> client;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="分布式计数器"><a href="#分布式计数器" class="headerlink" title="分布式计数器"></a>分布式计数器</h2><p>zookeeper分布式计数器实现思路: 指定一个zookeeper数据节点作为计数器，多个应用实例在分布式锁的控制下，通过更新该数据节点的内容来实现计数功能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">distributedCounter</span><span class="params">(CuratorFramework client)</span></span>&#123;</div><div class="line">	DistributedAtomicInteger counter = <span class="keyword">new</span> DistributedAtomicInteger(client, MASTER_PATH, <span class="keyword">new</span> RetryNTimes(<span class="number">3</span>, <span class="number">1000</span>));</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		AtomicValue&lt;Integer&gt; result = counter.add(<span class="number">10</span>);</div><div class="line">		System.out.println(<span class="string">"update:"</span> + result.succeeded());</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="分布式Barrier"><a href="#分布式Barrier" class="headerlink" title="分布式Barrier"></a>分布式Barrier</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorLock</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_SLEEP_TIME = <span class="number">1000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RETRIES_COUNT = <span class="number">5</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SLEEP_TIME = <span class="number">60000</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECT_STRING = <span class="string">"127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIMEOUT = <span class="number">5000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONNECTION_TIMEOUT = <span class="number">5000</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MASTER_PATH = <span class="string">"/master_lock"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span>  DistributedBarrier barrier;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">		distributedBarrier2();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">distributedBarrier2</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					<span class="comment">//1.设置重试策略,重试时间计算策略sleepMs = baseSleepTimeMs * Math.max(1, random.nextInt(1 &lt;&lt; (retryCount + 1)));</span></div><div class="line">					RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(BASE_SLEEP_TIME, MAX_RETRIES_COUNT, MAX_SLEEP_TIME);</div><div class="line"></div><div class="line">					<span class="comment">//2.使用Fluent风格初始化客户端</span></div><div class="line">					CuratorFramework client = CuratorFrameworkFactory.builder()</div><div class="line">											.connectString(CONNECT_STRING)</div><div class="line">											.sessionTimeoutMs(SESSION_TIMEOUT)</div><div class="line">											.connectionTimeoutMs(CONNECTION_TIMEOUT)</div><div class="line">											.retryPolicy(retryPolicy)</div><div class="line">											.namespace(<span class="string">"simple"</span>)		<span class="comment">//命名空间隔离</span></div><div class="line">											.build();</div><div class="line">					client.start();</div><div class="line"></div><div class="line">					<span class="comment">//可以指定成员个数</span></div><div class="line">					DistributedDoubleBarrier doubleBarrier = <span class="keyword">new</span> DistributedDoubleBarrier(client, MASTER_PATH, <span class="number">10</span>);</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						Thread.sleep(<span class="number">2000</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</div><div class="line">						<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">						e1.printStackTrace();</div><div class="line">					&#125;</div><div class="line">					System.out.println(Thread.currentThread().getName() + <span class="string">": ready!"</span>);</div><div class="line"></div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						doubleBarrier.enter();</div><div class="line">						System.out.println(Thread.currentThread().getName() + <span class="string">": run!"</span>);</div><div class="line">						Thread.currentThread().sleep(<span class="number">3000</span>);</div><div class="line">						doubleBarrier.leave();</div><div class="line">						System.out.println(Thread.currentThread().getName() + <span class="string">": exit!"</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;).start();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">distributedBarrier</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					<span class="comment">//1.设置重试策略,重试时间计算策略sleepMs = baseSleepTimeMs * Math.max(1, random.nextInt(1 &lt;&lt; (retryCount + 1)));</span></div><div class="line">					RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(BASE_SLEEP_TIME, MAX_RETRIES_COUNT, MAX_SLEEP_TIME);</div><div class="line"></div><div class="line">					<span class="comment">//2.使用Fluent风格初始化客户端</span></div><div class="line">					CuratorFramework client = CuratorFrameworkFactory.builder()</div><div class="line">											.connectString(CONNECT_STRING)</div><div class="line">											.sessionTimeoutMs(SESSION_TIMEOUT)</div><div class="line">											.connectionTimeoutMs(CONNECTION_TIMEOUT)</div><div class="line">											.retryPolicy(retryPolicy)</div><div class="line">											.namespace(<span class="string">"simple"</span>)		<span class="comment">//命名空间隔离</span></div><div class="line">											.build();</div><div class="line">					client.start();</div><div class="line"></div><div class="line">				       barrier = <span class="keyword">new</span> DistributedBarrier(client, MASTER_PATH);</div><div class="line"></div><div class="line">					System.out.println(Thread.currentThread().getName() + <span class="string">": ready!"</span>);</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						barrier.setBarrier();</div><div class="line">						<span class="comment">//Blocks until the barrier node comes into existence</span></div><div class="line">						barrier.waitOnBarrier();</div><div class="line">						System.out.println(Thread.currentThread().getName() + <span class="string">": run!"</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line"></div><div class="line">				&#125;</div><div class="line">			&#125;).start();</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		Thread.sleep(<span class="number">3000</span>);</div><div class="line">		barrier.removeBarrier();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考:</p>
<ul>
<li><a href="http://www.broadview.com.cn/#book/bookdetail/bookDetailAll.jsp?book_id=12ccd70f-a944-11e4-9c0a-005056c00008&amp;isbn=978-7-121-24967-9" target="_blank" rel="external">从Paxos到Zookeeper：分布式一致性原理与实践</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文所有实验基于&lt;a href=&quot;http://zookeeper.apache.org/doc/r3.4.6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache zookeeper-3.4.6&lt;/a&gt;版本, Curator版本2.7.1.&lt;/p
    
    </summary>
    
      <category term="ZooKeeper" scheme="http://wiki.jassassin.com/categories/ZooKeeper/"/>
    
    
  </entry>
  
  <entry>
    <title>zooKeeper client program</title>
    <link href="http://wiki.jassassin.com/2015/12/14/zookeeper/api/"/>
    <id>http://wiki.jassassin.com/2015/12/14/zookeeper/api/</id>
    <published>2015-12-14T06:40:44.000Z</published>
    <updated>2016-08-11T05:46:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文所有实验基于<a href="http://zookeeper.apache.org/doc/r3.4.6/" target="_blank" rel="external">Apache zookeeper-3.4.6</a>版本。</p>
<h2 id="zkCli-sh"><a href="#zkCli-sh" class="headerlink" title="zkCli.sh"></a>zkCli.sh</h2><p><code>$ZOOKEEPER_HOME/bin</code>目录下存在以下可执行脚本:</p>
<table>
<thead>
<tr>
<th style="text-align:left">脚本</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">zkCleanup.sh</td>
<td style="text-align:left">清理zookeeper历史数据，包括事务日志文件和快照数据文件</td>
</tr>
<tr>
<td style="text-align:left">zkCli.sh</td>
<td style="text-align:left">zookeeper客户端</td>
</tr>
<tr>
<td style="text-align:left">zkEnv.sh</td>
<td style="text-align:left">zookeeper环境变量设置</td>
</tr>
<tr>
<td style="text-align:left">zkServer.sh</td>
<td style="text-align:left">zookeeper服务启动、终止、重启脚本</td>
</tr>
</tbody>
</table>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>默认情况下<code>sh zkCli.sh</code>会连接到本机zookeeper服务器.<br><img src="/imgs/zookeeper/1.jpg" alt="start-localhost"><br>也可通过<code>sh zkCli.sh -server hostIp:port</code>连接到其他zookeeper服务器.</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><img src="/imgs/zookeeper/2.jpg" alt="start-localhost"></p>
<h2 id="Java客户端API"><a href="#Java客户端API" class="headerlink" title="Java客户端API"></a>Java客户端API</h2><p>zookeeper作为一个分布式服务框架，主要用来解决分布式数据一致性问题。其提供了多种语言的客户端API,这里主要是针对java客户端的基本操作。<br>maven依赖:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="创建会话"><a href="#创建会话" class="headerlink" title="创建会话"></a>创建会话</h3><p>客户端可通过创建一个ZooKeeper实例来连接ZooKeeper服务器。需要注意的是该会话过程的建立是一个异步的过程，构造方法在客户端初始化之后立刻返回，此时并没有真正建立一个可用的会话，在会话周期中处于”CONNECTING”状态。当该会话真正创建完成之后，ZooKeeper服务端向对应的客户端发送一个事件通知连接建立完毕。下面是ZooKeeper提供的四种构造方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * connectString	zookeeper服务器地址列表，格式host:port，多个服务器地址以","分隔。如"192.168.2.71:2181,192.168.2.72:2181"，同时还可指定连接根目录(Chroot)。</div><div class="line"> *		  	如"192.168.2.71:2181,192.168.2.72:2181/test",这样该次会话的根目录都会基于"/test"进行操作。这样可以实现资源隔离</div><div class="line"> * sessionTimeout	会话超时时间(毫秒)，在一个会话周期内，zookeeper客户端和服务器之间通过心跳检测机制来维持会话的有效性，如果在sessionTimeout时间内没有有效的心跳检测，则该次会话将会失效</div><div class="line"> * watcher		事件通知处理器</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher)</span></span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * canBeReadOnly	用于表示该次会话是否支持"Read-only"模式。默认情况下，当ZooKeeper集群中某个节点与其他大部分节点失去联系时，该机器将不再处理客户端的读写请求。但在"Read-only"模式下，该节点可以继续处理客户端读请求。</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher, <span class="keyword">boolean</span> canBeReadOnly)</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * sessionId，sessionPasswd	分别代表会话id和会话密钥,通过这两个参数可以唯一确定一次客户端和服务器之间的会话，从而实现会话复用。可以通过在第一次实现会话之后获取这两个参数，再次连接时再将两个参数传递进去</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher, <span class="keyword">long</span> sessionId, <span class="keyword">byte</span>[] sessionPasswd)</span></div><div class="line"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher, <span class="keyword">long</span> sessionId, <span class="keyword">byte</span>[] sessionPasswd, <span class="keyword">boolean</span> canBeReadOnly)</span></div></pre></td></tr></table></figure></p>
<p>基本会话实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * zookeeper会话实例,注意该类同时实现了Watcher接口</div><div class="line"> * <span class="doctag">@author</span> eagle</div><div class="line"> * <span class="doctag">@date</span> 2015年12月15日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperSessionDemo</span> <span class="keyword">implements</span> <span class="title">Watcher</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch connectSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECT_STRING = <span class="string">"127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183/simple"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SESSION_TIMEOUT = <span class="number">5000</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		simpleConnect();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 简单会话</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">simpleConnect</span><span class="params">()</span></span>&#123;</div><div class="line">		ZooKeeper client = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			client = <span class="keyword">new</span> ZooKeeper(CONNECT_STRING, DEFAULT_SESSION_TIMEOUT, <span class="keyword">new</span> ZooKeeperSessionDemo());</div><div class="line">			System.out.println(client.getState());</div><div class="line">			connectSignal.await();</div><div class="line">			System.out.println(<span class="string">"finish connected!"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">if</span>(client != <span class="keyword">null</span>)&#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					client.close();</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"Receive watched event:"</span> + event);</div><div class="line"></div><div class="line">		<span class="comment">//连接建立完成</span></div><div class="line">		<span class="keyword">if</span>(KeeperState.SyncConnected == event.getState())&#123;</div><div class="line">			connectSignal.countDown();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CONNECTING</div><div class="line">Receive watched event:WatchedEvent state:SyncConnected type:None path:null</div><div class="line">finish connected!</div></pre></td></tr></table></figure></p>
<p>session复用测试:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试通过sessionId以及sessionPasswd复用会话连接</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createConnectBySeessionId</span><span class="params">()</span></span>&#123;</div><div class="line">	ZooKeeper client = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		client = <span class="keyword">new</span> ZooKeeper(CONNECT_STRING, DEFAULT_SESSION_TIMEOUT, <span class="keyword">new</span> ZooKeeperSessionDemo());</div><div class="line">		connectSignal.await();</div><div class="line"></div><div class="line">		<span class="comment">//获取sessionId以及sessionPasswd</span></div><div class="line">		<span class="keyword">long</span> sessionId = client.getSessionId();</div><div class="line">		<span class="keyword">byte</span>[] sessionPasswd = client.getSessionPasswd();</div><div class="line">		System.out.println(<span class="string">"first connected session id:"</span> + sessionId);</div><div class="line"></div><div class="line">		<span class="comment">//使用错误的sesssionId</span></div><div class="line">		ZooKeeper clientWithWrongSessionId = <span class="keyword">new</span> ZooKeeper(CONNECT_STRING, DEFAULT_SESSION_TIMEOUT, <span class="keyword">new</span> ZooKeeperSessionDemo(), <span class="keyword">new</span> Random().nextLong(), sessionPasswd);</div><div class="line"></div><div class="line">		<span class="comment">//使用正确的sessionId以及sessionPasswd</span></div><div class="line">		client = <span class="keyword">new</span> ZooKeeper(CONNECT_STRING, DEFAULT_SESSION_TIMEOUT, <span class="keyword">new</span> ZooKeeperSessionDemo(), sessionId, sessionPasswd);</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span>&#123;</div><div class="line">		<span class="keyword">if</span>(client != <span class="keyword">null</span>)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				client.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Receive watched event:WatchedEvent state:SyncConnected type:None path:null</div><div class="line">first connected session id:167089735794753536</div><div class="line">Receive watched event:WatchedEvent state:Expired type:None path:null   //复用错误的sessionId，连接失败</div><div class="line">Receive watched event:WatchedEvent state:SyncConnected type:None path:null   //复用正确的sessionId</div></pre></td></tr></table></figure></p>
<h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>zookeeper分别提供以下两种同步和异步的方式创建节点，同时注意临时节点是无法创建子节点的。</p>
<ol>
<li>同步方式</li>
</ol>
<p>调用接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 同步方式</div><div class="line"> * <span class="doctag">@param</span> path	节点路径</div><div class="line"> * <span class="doctag">@param</span> data	节点创建之后的初始化内容</div><div class="line"> * <span class="doctag">@param</span> acl	节点ACL策略</div><div class="line"> * <span class="doctag">@param</span> createMode	枚举类型,共4种. PERSISTENT(持久节点，会话结束会继续存在)/PERSISTENT_SEQUENTIAL(持久顺序型)</div><div class="line"> * 			EPHEMERAL（临时节点,会话结束则自动删除）/ EPHEMERAL_SEQUENTIAL(临时顺序型)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">byte</span> data[], List&lt;ACL&gt; acl,CreateMode createMode)</span></span>&#123;</div></pre></td></tr></table></figure></p>
<p>实例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过同步方式创建节点</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createZNodeSync</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException</span>&#123;</div><div class="line">	ZooKeeper client = <span class="keyword">new</span> ZooKeeper(CONNECT_STRING, DEFAULT_SESSION_TIMEOUT, <span class="keyword">new</span> ZooKeeperSessionDemo());</div><div class="line">	connectSignal.await();</div><div class="line">	String path = client.create(<span class="string">"/s1"</span>, <span class="string">"s1"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</div><div class="line">	System.out.println(<span class="string">"finish create znode:"</span> + path);</div><div class="line">	path = client.create(<span class="string">"/s1"</span>, <span class="string">"s1"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class="line">	System.out.println(<span class="string">"finish create znode:"</span> + path);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Receive watched event:WatchedEvent state:SyncConnected type:None path:null</div><div class="line">finish create znode:/s1</div><div class="line">finish create znode:/s10000000002</div></pre></td></tr></table></figure>
<p>注意:以上操作均是在根目录/simple下操作(CONNECT_STRING = “127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183/simple”)。</p>
<ol>
<li>异步方式</li>
</ol>
<p>调用接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 异步方式</div><div class="line"> * <span class="doctag">@param</span> path	节点路径</div><div class="line"> * <span class="doctag">@param</span> data	节点创建之后的初始化内容</div><div class="line"> * <span class="doctag">@param</span> acl	节点ACL策略</div><div class="line"> * <span class="doctag">@param</span> createMode	枚举类型,共4种. PERSISTENT(持久节点，会话结束会继续存在)/PERSISTENT_SEQUENTIAL(持久顺序型)</div><div class="line"> * 									  EPHEMERAL（临时节点,会话结束则自动删除）/ EPHEMERAL_SEQUENTIAL(临时顺序型)</div><div class="line"> * <span class="doctag">@param</span> cb	注册一个回调函数。当服务器节点创建完成之后，客户端会自动调用该接口</div><div class="line"> * <span class="doctag">@param</span> ctx	用于传递一个对象，可以被传递到回调方法中。通常放置一个上下文信息</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">byte</span> data[], List&lt;ACL&gt; acl,CreateMode createMode,  StringCallback cb, Object ctx)</span></span></div></pre></td></tr></table></figure></p>
<p>demo:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过异步方式创建节点</div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> * <span class="doctag">@throws</span> InterruptedException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createZNodeAsync</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</div><div class="line">	ZooKeeper client = <span class="keyword">new</span> ZooKeeper(CONNECT_STRING, DEFAULT_SESSION_TIMEOUT, <span class="keyword">new</span> ZooKeeperSessionDemo());</div><div class="line">	connectSignal.await();</div><div class="line"></div><div class="line">	client.create(<span class="string">"/s1"</span>, <span class="string">"s1"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL, <span class="keyword">new</span> StringCallback() &#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> rc, String path, Object ctx, String name)</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"create path result:[rc:"</span> + rc + <span class="string">", path:"</span> + path + <span class="string">", ctx:"</span> + ctx + <span class="string">", name:"</span> + name + <span class="string">"]"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;, <span class="string">"hello"</span>);</div><div class="line"></div><div class="line">	<span class="comment">//注意由于是异步创建,这里将线程sleep一会，以便打印结果</span></div><div class="line">	Thread.sleep(<span class="number">10000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Receive watched event:WatchedEvent state:SyncConnected type:None path:null</div><div class="line">create path result:[rc:0, path:/s1, ctx:hello, name:/s10000000006]</div></pre></td></tr></table></figure></p>
<p>关于StringCallback中processResult()方法的相关说明:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">StringCallback</span> <span class="keyword">extends</span> <span class="title">AsyncCallback</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> rc	服务端响应码</div><div class="line">	 *		0(OK):调用成功.	-4(ConnectionLoss):客户端与服务端断开连接	-100(NodeExists):指定节点已经存在	-112(SessionExpired):会话已过期</div><div class="line">	 * <span class="doctag">@param</span> path	接口调用时传入api的数据节点的节点路径参数</div><div class="line">	 * <span class="doctag">@param</span> ctx	接口调用时传入api的ctx的参数值</div><div class="line">	 * <span class="doctag">@param</span> name	实际在服务器端创建的节点</div><div class="line">	 */</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> rc, String path, Object ctx, String name)</span></span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><strong> 关于同步和异步接口方法的最大区别在于，节点的创建过程(包括网络通信和服务端的节点创建过程)是异步的。在异步接口中，接口本身是不会抛出异常的，所有的异常都会在回调函数中通过Result Code来体现。</strong></p>
<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>和创建节点一样，删除节点同样提供了同步和异步两种。注意,如果被删除的节点同时存在子节点，则该节点将无法删除，除非先删除其所有子节点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 异步删除</div><div class="line"> * <span class="doctag">@param</span> path		删除节点路径</div><div class="line"> * <span class="doctag">@param</span> version	数据版本,zookeeper中的数据版本从0开始递增。-1表示最新数据版本</div><div class="line"> * <span class="doctag">@param</span> cb		回调函数</div><div class="line"> * <span class="doctag">@param</span> ctx		上下文信息</div><div class="line"> */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">int</span> version, VoidCallback cb,Object ctx)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 同步删除</div><div class="line"> */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">int</span> version)</span></span>;</div></pre></td></tr></table></figure>
<p>demo:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过同步方式创建节点</div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> * <span class="doctag">@throws</span> InterruptedException</div><div class="line"> * <span class="doctag">@throws</span> KeeperException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteZNodeSync</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException</span>&#123;</div><div class="line">	ZooKeeper client = <span class="keyword">new</span> ZooKeeper(CONNECT_STRING, DEFAULT_SESSION_TIMEOUT, <span class="keyword">new</span> ZooKeeperSessionDemo());</div><div class="line">	connectSignal.await();</div><div class="line">	String path = client.create(<span class="string">"/s1"</span>, <span class="string">"s1"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</div><div class="line">	System.out.println(<span class="string">"finish create znode:"</span> + path);</div><div class="line">	List&lt;String&gt; children = client.getChildren(<span class="string">"/"</span>, <span class="keyword">false</span>);</div><div class="line">	System.out.println(<span class="string">"children:"</span> + children.toString());</div><div class="line">	client.delete(path, -<span class="number">1</span>);</div><div class="line">	System.out.println(<span class="string">"finish delete znode:"</span> + path);</div><div class="line">	children = client.getChildren(<span class="string">"/"</span>, <span class="keyword">false</span>);</div><div class="line">	System.out.println(<span class="string">"children:"</span> + children.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Receive watched event:WatchedEvent state:SyncConnected type:None path:null</div><div class="line">finish create znode:/s1</div><div class="line">children:[s1]</div><div class="line">finish delete znode:/s1</div><div class="line">children:[]</div></pre></td></tr></table></figure></p>
<h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><p>读取数据，包括或子节点以及当前节点的数据.</p>
<ol>
<li>获取子节点</li>
</ol>
<p>可以通过如下接口获取当前节点的子节点:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getChildren</span><span class="params">(<span class="keyword">final</span> String path, Watcher watcher)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getChildren</span><span class="params">(String path, <span class="keyword">boolean</span> watch)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getChildren</span><span class="params">(<span class="keyword">final</span> String path, Watcher watcher,ChildrenCallback cb, Object ctx)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getChildren</span><span class="params">(String path, <span class="keyword">boolean</span> watch, ChildrenCallback cb, Object ctx)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getChildren</span><span class="params">(<span class="keyword">final</span> String path, Watcher watcher,Stat stat)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getChildren</span><span class="params">(String path, <span class="keyword">boolean</span> watch, Stat stat)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getChildren</span><span class="params">(<span class="keyword">final</span> String path, Watcher watcher,Children2Callback cb, Object ctx)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getChildren</span><span class="params">(String path, <span class="keyword">boolean</span> watch, Children2Callback cb,Object ctx)</span></span>;</div></pre></td></tr></table></figure>
<p>参数说明</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">path</td>
<td style="text-align:left">节点路径</td>
</tr>
<tr>
<td style="text-align:left">watcher</td>
<td style="text-align:left">注册Ｗatcher。一旦在本次子节点获取之后，子节点列表发生变化，那么就会通过该watcher向客户端发送通知。该参数允许为null</td>
</tr>
<tr>
<td style="text-align:left">watch</td>
<td style="text-align:left">是否需要注册一个watcher。这里指默认watcher</td>
</tr>
<tr>
<td style="text-align:left">cb</td>
<td style="text-align:left">异步回调函数</td>
</tr>
<tr>
<td style="text-align:left">ctx</td>
<td style="text-align:left">上下文信息对象</td>
</tr>
<tr>
<td style="text-align:left">stat</td>
<td style="text-align:left">指定数据节点的节点状态信息。用法是在接口中传入一个旧的stat变量，该stat变量会在方法执行过程中，被来自服务器响应的新的stat对象替换</td>
</tr>
</tbody>
</table>
<p><strong> 需要注意的是，注册的Watcher当子节点发生变化时，服务端会向客户端发送一个NodeChildrenChanged(EventType.NodeChildrenChanged)类型的事件通知。注意，该通知中并没有包含最新的节点列表，最新的节点列表客户端必须主动重新获取。</strong></p>
<p>同步获取子节点:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 同步获取子节点列表</div><div class="line"> *</div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> * <span class="doctag">@throws</span> InterruptedException</div><div class="line"> * <span class="doctag">@throws</span> KeeperException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getChildrenSync</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException</span>&#123;</div><div class="line">	<span class="keyword">final</span> ZooKeeper client = <span class="keyword">new</span> ZooKeeper(CONNECT_STRING, DEFAULT_SESSION_TIMEOUT, <span class="keyword">new</span> ZooKeeperSessionDemo());</div><div class="line">	connectSignal.await();</div><div class="line"></div><div class="line">	<span class="comment">//获取子节点,注意这里的"/"即"/simple"，连接时由CONNECT_STRING指定"127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183/simple";</span></div><div class="line">	client.getChildren(<span class="string">"/"</span>, <span class="keyword">new</span> Watcher()&#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span>(EventType.NodeChildrenChanged == event.getType())&#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">						System.out.println(<span class="string">"receive node changed event. reload children:"</span> +  client.getChildren(event.getPath(), <span class="keyword">true</span>));</div><div class="line">					&#125; <span class="keyword">catch</span> (KeeperException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	<span class="comment">//创建子节点/simple/s1</span></div><div class="line">	String path = client.create(<span class="string">"/s1"</span>, <span class="string">"s1"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</div><div class="line">	System.out.println(<span class="string">"finish create znode:"</span> + path);</div><div class="line"></div><div class="line">	path = client.create(<span class="string">"/s2"</span>, <span class="string">"s2"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</div><div class="line">	System.out.println(<span class="string">"finish create znode:"</span> + path);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">finish create znode:/s1</div><div class="line">receive node changed event. reload children:[s1]</div><div class="line">finish create znode:/s2</div></pre></td></tr></table></figure></p>
<p><strong> 注:由上面输出可以看出,在创建子节点/s1时，触发了node changed事件。但是在创建/s2时并没有触发该事件，这是由于getChildren()中的Watcher一旦触发一次之后就失效了，需要客户端自己再重新注册!</strong></p>
<p>异步:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 异步获取子节点列表</div><div class="line"> *</div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> * <span class="doctag">@throws</span> InterruptedException</div><div class="line"> * <span class="doctag">@throws</span> KeeperException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getChildrenAsync</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException</span>&#123;</div><div class="line">	<span class="keyword">final</span> ZooKeeper client = <span class="keyword">new</span> ZooKeeper(CONNECT_STRING, DEFAULT_SESSION_TIMEOUT, <span class="keyword">new</span> ZooKeeperSessionDemo());</div><div class="line">	connectSignal.await();</div><div class="line"></div><div class="line">	<span class="comment">//创建子节点/simple/s1</span></div><div class="line">	String path = client.create(<span class="string">"/s1"</span>, <span class="string">"s1"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</div><div class="line">	System.out.println(<span class="string">"finish create znode:"</span> + path);</div><div class="line"></div><div class="line">	<span class="comment">//获取子节点,注意这里的"/"即"/simple"，连接时由CONNECT_STRING指定"127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183/simple";</span></div><div class="line">	client.getChildren(<span class="string">"/"</span>, <span class="keyword">true</span>, <span class="keyword">new</span> AsyncCallback.Children2Callback()&#123;</div><div class="line"></div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> rc, String path, Object ctx, List&lt;String&gt; children, Stat stat)</span> </span>&#123;</div><div class="line">					System.out.println(<span class="string">"async get children:[response code:"</span> + rc + <span class="string">", path:"</span> + path + <span class="string">", ctx:"</span> + ctx + <span class="string">", children:"</span> + children.toString() + <span class="string">", stat:"</span> + stat + <span class="string">"]"</span>);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;, <span class="string">"hello"</span>);</div><div class="line"></div><div class="line">	path = client.create(<span class="string">"/s2"</span>, <span class="string">"s2"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</div><div class="line">	System.out.println(<span class="string">"finish create znode:"</span> + path);</div><div class="line"></div><div class="line">	Thread.sleep(<span class="number">10000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">finish create znode:/s1</div><div class="line">async get children:[response code:0, path:/, ctx:hello, children:[s1], stat:25769803785,25769803785,1450153810191,1450153810191,0,59,0,0,11,1,25769803877]</div><div class="line">finish create znode:/s2</div></pre></td></tr></table></figure></p>
<ol>
<li>getData</li>
</ol>
<p>getData()接口和getChildren()接口参数意义基本相同.当节点数据发生变化时,服务端会发送ＮodeDataChanged通知.</p>
<p>同步方式:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperGetDataDemo</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch connectSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECT_STRING = <span class="string">"127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183/simple"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SESSION_TIMEOUT = <span class="number">5000</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper client;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Stat stat = <span class="keyword">new</span> Stat();</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> KeeperException, InterruptedException</span>&#123;</div><div class="line">		client = initClient();</div><div class="line"></div><div class="line">		<span class="comment">//创建"/simple/test1"</span></div><div class="line">		String path = client.create(<span class="string">"/test1"</span>, <span class="string">"test1"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</div><div class="line">		System.out.println(<span class="string">"success create path:"</span> + path);</div><div class="line"></div><div class="line">		<span class="comment">//获取数据,注册Watcher</span></div><div class="line">		String data = <span class="keyword">new</span> String(client.getData(path, <span class="keyword">new</span> ZooKeeperGetDataDemo(), stat));</div><div class="line">		System.out.println(<span class="string">"data:"</span> + data);</div><div class="line">		System.out.println(<span class="string">"stat:"</span> + stat.getCzxid() + <span class="string">","</span> + stat.getMzxid() + <span class="string">","</span> + stat.getVersion());</div><div class="line"></div><div class="line">		<span class="comment">//更新数据,-1指当前数据的最新版本</span></div><div class="line">		client.setData(path, <span class="string">"test2"</span>.getBytes(), -<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZooKeeper <span class="title">initClient</span><span class="params">()</span> </span>&#123;</div><div class="line">		ZooKeeper client = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			client = <span class="keyword">new</span> ZooKeeper(CONNECT_STRING, DEFAULT_SESSION_TIMEOUT,<span class="keyword">new</span> ZooKeeperGetDataDemo());</div><div class="line">			connectSignal.await();</div><div class="line">			System.out.println(<span class="string">"finish connected!"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> client;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(KeeperState.SyncConnected == event.getState())&#123;</div><div class="line">			<span class="keyword">if</span>(EventType.None == event.getType() &amp;&amp; event.getPath() == <span class="keyword">null</span>)&#123;</div><div class="line">				connectSignal.countDown();</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(EventType.NodeDataChanged == event.getType())&#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					System.out.println(<span class="string">"process data:"</span> + <span class="keyword">new</span> String(client.getData(event.getPath(), <span class="keyword">true</span>, stat)));</div><div class="line">					System.out.println(<span class="string">"process stat:"</span> + stat.getCzxid() + <span class="string">","</span> + stat.getMzxid() + <span class="string">","</span> + stat.getVersion());</div><div class="line">				&#125; <span class="keyword">catch</span> (KeeperException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">finish connected!</div><div class="line">success create path:/test1</div><div class="line">data:test1</div><div class="line">stat:25769803885,25769803885,0</div><div class="line">process data:test2</div><div class="line">process stat:25769803885,25769803886,1</div></pre></td></tr></table></figure></p>
<p><strong> 注意NodeDataChanged触发条件是节点数据内容变化或数据版本变更,同时注意其中Stat使用方式 </strong></p>
<h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><p>数据更新接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Stat <span class="title">setData</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">byte</span> data[], <span class="keyword">int</span> version)</span></span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> path</div><div class="line"> * <span class="doctag">@param</span> data</div><div class="line"> * <span class="doctag">@param</span> version	指定数据版本即本次数据变更针对的版本</div><div class="line"> * <span class="doctag">@param</span> cb</div><div class="line"> * <span class="doctag">@param</span> ctx</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">byte</span> data[], <span class="keyword">int</span> version,StatCallback cb, Object ctx)</span></span>;</div></pre></td></tr></table></figure></p>
<p><strong> 关于数据版本,zookeeper每个节点都有数据版本的概念,在调用更新操作的时候可以添加version参数,该参数对应于”CAS”原理中的”预期值”,表明是针对该数据版本进行更新的.也就是说,当一个客户端试图进行更新操作,它会携带上次获取到的version值进行更新.而如果在这段时间内,zookeeper服务器上该节点数据恰好已经被其他客户端更新了,那么其数据版本一定也会发生变化,因此会与客户端携带的version无法匹配,于是便会更新失败.这样可以有效的避免一些分布式更新的并发问题.而zookeeper客户端就可以利用该特性构建更复杂的应用场景如分布式锁服务等. </strong></p>
<h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p>使用方式:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * scheme zookeeper分别提供了world, auth, digest, ip以及super等几种</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAuthInfo</span><span class="params">(String scheme, <span class="keyword">byte</span> auth[])</span></span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperACLDemo</span> <span class="keyword">implements</span> <span class="title">Watcher</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch connectSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECT_STRING = <span class="string">"127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183/simple"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SESSION_TIMEOUT = <span class="number">5000</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//1.使用带有权限认证的客户端创建节点"/acl-test"</span></div><div class="line">		ZooKeeper client = initClient();</div><div class="line">		<span class="comment">//附加权限认证</span></div><div class="line">		client.addAuthInfo(<span class="string">"digest"</span>, <span class="string">"eagle:eagle"</span>.getBytes());</div><div class="line">		<span class="comment">//创建节点"/simple/acl-test"</span></div><div class="line">		String path = client.create(<span class="string">"/acl-test2"</span>, <span class="string">"/acl-test2"</span>.getBytes(), Ids.CREATOR_ALL_ACL, CreateMode.PERSISTENT);</div><div class="line">		System.out.println(<span class="string">"success create znode:"</span> + path + <span class="string">" with auth info!"</span>);</div><div class="line">		<span class="comment">//关闭连接</span></div><div class="line">		client.close();</div><div class="line">		connectSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line"></div><div class="line">		<span class="comment">//2.使用没有权限认证的客户端,创建子节点"/acl-test/test1"</span></div><div class="line">		client = initClient();</div><div class="line"></div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			client.create(path + <span class="string">"/test2"</span>, <span class="string">"/acl-test2/test2"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</div><div class="line">		&#125; <span class="keyword">catch</span>(Throwable e)&#123;</div><div class="line">			System.err.println(<span class="string">"failed create "</span> + (path + <span class="string">"/test2 without auth info, caused by:"</span>) +  e.getMessage());</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//3.添加权限认证,创建子节点"/acl-test/test1"</span></div><div class="line">		client.addAuthInfo(<span class="string">"digest"</span>, <span class="string">"eagle:eagle"</span>.getBytes());</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			path = client.create(path + <span class="string">"/test2"</span>, <span class="string">"/acl-test2/test2"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</div><div class="line">			System.out.println(<span class="string">"success create with auth info for path:"</span> + path);</div><div class="line">		&#125; <span class="keyword">catch</span>(Throwable e)&#123;</div><div class="line">			System.err.println(e.getMessage());</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		client.close();</div><div class="line">		connectSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">		client = initClient();</div><div class="line"></div><div class="line">		<span class="comment">//4.使用无权限认证的客户端删除"/simple/acl-test/test1"</span></div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			client.delete(<span class="string">"/acl-test2/test2"</span>, -<span class="number">1</span>);</div><div class="line">			System.out.println(<span class="string">"success delete path:/acl-test2/test2 without auth info!"</span>);</div><div class="line">		&#125;<span class="keyword">catch</span>(Throwable e)&#123;</div><div class="line">			System.err.println(<span class="string">"failed delete path:/acl-test2/test2 without auth info!"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//5.使用有权限认证的客户端删除"/simple/acl-test/test1"</span></div><div class="line">		client.addAuthInfo(<span class="string">"digest"</span>, <span class="string">"eagle:eagle"</span>.getBytes());</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			client.delete(<span class="string">"/acl-test2/test2"</span>, -<span class="number">1</span>);</div><div class="line">			System.out.println(<span class="string">"success delete path:/acl-test2/test2 with auth info!"</span>);</div><div class="line">		&#125;<span class="keyword">catch</span>(Throwable e)&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//6.使用无权限认证的客户端删除"/simple/acl-test"</span></div><div class="line">		client.close();</div><div class="line">		connectSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">		client = initClient();</div><div class="line"></div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			client.delete(<span class="string">"/acl-test2"</span>, -<span class="number">1</span>);</div><div class="line">			System.out.println(<span class="string">"success delete path:/acl-test2 without auth info!"</span>);</div><div class="line">		&#125;<span class="keyword">catch</span>(Throwable e)&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZooKeeper <span class="title">initClient</span><span class="params">()</span> </span>&#123;</div><div class="line">		ZooKeeper client = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			client = <span class="keyword">new</span> ZooKeeper(CONNECT_STRING, DEFAULT_SESSION_TIMEOUT,<span class="keyword">new</span> ZooKeeperACLDemo());</div><div class="line">			connectSignal.await();</div><div class="line">			System.out.println(<span class="string">"finish connected!"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> client;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(KeeperState.SyncConnected == event.getState())&#123;</div><div class="line">			connectSignal.countDown();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">finish connected!</div><div class="line">success create znode:/acl-test2 with auth info!</div><div class="line">finish connected!</div><div class="line">failed create /acl-test2/test2 without auth info, caused by:KeeperErrorCode = NoAuth for /acl-test2/test2</div><div class="line">success create with auth info for path:/acl-test2/test2</div><div class="line">finish connected!</div><div class="line">failed delete path:/acl-test2/test2 without auth info!</div><div class="line">success delete path:/acl-test2/test2 with auth info!</div><div class="line">finish connected!</div><div class="line">success delete path:/acl-test2 without auth info!</div></pre></td></tr></table></figure></p>
<p><strong> 值得注意的是在前面6中的操作是成功的,也就是说对一个节点添加权限之后,对于其删除权限作用范围是其子节点,当这个节点的所有子节点均被删除之后,该节点依然可以被没有认证信息的客户端删除 </strong></p>
<h2 id="开源客户端Curator"><a href="#开源客户端Curator" class="headerlink" title="开源客户端Curator"></a>开源客户端Curator</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Curator是Netflix开源的一套ZooKeeper客户端框架.和ZkClient一样,Curator解决了很多zookeeper客户端非常底层的细节开发工作,包括连接重连,反复注册Watcher和NodeExistsException异常等,目前已成为Apache顶级项目.详细介绍可参考<a href="http://macrochen.iteye.com/blog/1366136" target="_blank" rel="external">Zookeeper开源客户端框架Curator简介</a>.</p>
<p>maven依赖:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * zookeeper开源客户端框架Curator测试</div><div class="line"> * <span class="doctag">@author</span> eagle</div><div class="line"> * <span class="doctag">@date</span> 2015年12月15日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 初始sleep时间(毫秒)</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_SLEEP_TIME = <span class="number">1000</span>;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 最大重试次数</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RETRIES_COUNT = <span class="number">5</span>;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 最大sleep时间</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SLEEP_TIME = <span class="number">60000</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECT_STRING = <span class="string">"127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIMEOUT = <span class="number">5000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONNECTION_TIMEOUT = <span class="number">5000</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		CuratorFramework client = initClient();</div><div class="line">		String destPath = <span class="string">"/curator-test/test1"</span>;</div><div class="line">		createData(client, destPath);</div><div class="line">		deleteData(client, destPath);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 初始化客户端</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CuratorFramework <span class="title">initClient</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//1.设置重试策略,重试时间计算策略sleepMs = baseSleepTimeMs * Math.max(1, random.nextInt(1 &lt;&lt; (retryCount + 1)));</span></div><div class="line">		RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(BASE_SLEEP_TIME, MAX_RETRIES_COUNT, MAX_SLEEP_TIME);</div><div class="line"></div><div class="line">		<span class="comment">//2.使用Fluent风格初始化客户端</span></div><div class="line">		CuratorFramework client = CuratorFrameworkFactory.builder()</div><div class="line">									.connectString(CONNECT_STRING)</div><div class="line">									.sessionTimeoutMs(SESSION_TIMEOUT)</div><div class="line">									.connectionTimeoutMs(CONNECTION_TIMEOUT)</div><div class="line">									.retryPolicy(retryPolicy)</div><div class="line">									.namespace(<span class="string">"simple"</span>)		<span class="comment">//命名空间隔离</span></div><div class="line">									.build();</div><div class="line">		client.start();</div><div class="line">		<span class="keyword">return</span> client;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建节点</div><div class="line">	 * <span class="doctag">@param</span> client</div><div class="line">	 * <span class="doctag">@param</span> destPath</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createData</span><span class="params">(CuratorFramework client, String destPath)</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//创建节点时,如果父节点不存在,则一起被创建</span></div><div class="line">			String path = client.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(destPath);</div><div class="line">			System.out.println(<span class="string">"finish create path:"</span> + path);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除节点</div><div class="line">	 * <span class="doctag">@param</span> client</div><div class="line">	 * <span class="doctag">@param</span> destPath</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteData</span><span class="params">(CuratorFramework client, String destPath)</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//删除一个节点,强制保证删除</span></div><div class="line">			client.delete().guaranteed().forPath(destPath);</div><div class="line">			System.out.println(<span class="string">"success delete path:"</span> + destPath);</div><div class="line">			createData(client, destPath);</div><div class="line">			<span class="comment">//删除一个节点,强制并递归删除所有子节点</span></div><div class="line">			client.delete().deletingChildrenIfNeeded().forPath(<span class="string">"/curator-test"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考:</p>
<ul>
<li><a href="http://www.broadview.com.cn/#book/bookdetail/bookDetailAll.jsp?book_id=12ccd70f-a944-11e4-9c0a-005056c00008&amp;isbn=978-7-121-24967-9" target="_blank" rel="external">从Paxos到Zookeeper：分布式一致性原理与实践</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;本文所有实验基于&lt;a href=&quot;http://zookeeper.apache.org/doc/r3.4.6/&quot; target=&quot;_bla
    
    </summary>
    
      <category term="ZooKeeper" scheme="http://wiki.jassassin.com/categories/ZooKeeper/"/>
    
    
  </entry>
  
  <entry>
    <title>observer</title>
    <link href="http://wiki.jassassin.com/2015/11/19/design_patterns/observer/"/>
    <id>http://wiki.jassassin.com/2015/11/19/design_patterns/observer/</id>
    <published>2015-11-19T06:02:44.000Z</published>
    <updated>2016-08-11T05:43:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>   观察者模式是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。        — 阎宏《JAVA与模式》</p>
</blockquote>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="/imgs/patterns/observer.png" alt="oberver"></p>
<h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><p>观察者IObserver:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IObserver</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//当通知到来时观察者的更新动作</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 观察者名称</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>具体观察者ConcreteObserver:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">IObserver</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteObserver</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="keyword">this</span>.name + <span class="string">" --- receive subject state change:"</span> + temp);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>观察主题ISubject:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISubject</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(IObserver observer)</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(IObserver observer)</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObsevers</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeState</span><span class="params">(<span class="keyword">float</span> temp)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>具体观察主题ConcreteSubject:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">implements</span> <span class="title">ISubject</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> List&lt;IObserver&gt; observers;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> temp;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteSubject</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.observers = <span class="keyword">new</span> ArrayList&lt;IObserver&gt;();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(IObserver observer)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.observers.add(observer);</div><div class="line">		System.out.println(<span class="string">"register one observer:"</span> + observer.name());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(IObserver observer)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.observers.remove(observer);</div><div class="line">		System.out.println(<span class="string">"remove one observer:"</span> + observer.name());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObsevers</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(IObserver observer: <span class="keyword">this</span>.observers)&#123;</div><div class="line">			observer.update(<span class="keyword">this</span>.temp);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeState</span><span class="params">(<span class="keyword">float</span> temp)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.temp = temp;</div><div class="line">		notifyObsevers();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试Main:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//1.创建观察主题</span></div><div class="line">		ISubject subject = <span class="keyword">new</span> ConcreteSubject();</div><div class="line"></div><div class="line">		<span class="comment">//2.创建观察者</span></div><div class="line">		IObserver observer1 = <span class="keyword">new</span> ConcreteObserver(<span class="string">"observer-1"</span>);</div><div class="line">		IObserver observer2 = <span class="keyword">new</span> ConcreteObserver(<span class="string">"observer-2"</span>);</div><div class="line">		IObserver observer3 = <span class="keyword">new</span> ConcreteObserver(<span class="string">"observer-3"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//3.注册观察者</span></div><div class="line">		subject.registerObserver(observer1);</div><div class="line">		subject.registerObserver(observer2);</div><div class="line">		subject.registerObserver(observer3);</div><div class="line"></div><div class="line">		Random seed = <span class="keyword">new</span> Random(<span class="number">100</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">			System.out.println(<span class="string">"-------------"</span>);</div><div class="line">			subject.changeState(seed.nextFloat());</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		subject.removeObserver(observer1);</div><div class="line">		subject.removeObserver(observer2);</div><div class="line">		subject.removeObserver(observer3);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h2><p><a href="http://www.cnblogs.com/peida/p/EventBus.html" target="_blank" rel="external">EventBus</a>是<a href="http://ifeve.com/google-guava/" target="_blank" rel="external">Guava</a>的事件处理机制，是设计模式中的观察者模式（生产/消费者编程模型）的优雅实现。对于事件监听和发布订阅模式，EventBus是一个非常优雅和简单解决方案，我们不用创建复杂的类和接口层次结构。</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>使用Guava之后, 如果要订阅消息, 就不用再继承指定的接口, 只需要在指定的方法上加上@Subscribe注解即可。也就说我们只要实现观察者就好了.</p>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>消息模型SimpleEvent:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleEvent</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String message;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SimpleEvent</span><span class="params">(String message)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.message = message;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> message;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>观察者SimpleEventListener:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleEventListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Subscribe</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(SimpleEvent event)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"simple listener listen:"</span> + event.getMessage());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Subscribe</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(Number numberEvent)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"simple listener listen:"</span> + numberEvent.toString());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试SimpleEventBusTest:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleEventBusTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		EventBus bus = <span class="keyword">new</span> EventBus();</div><div class="line"></div><div class="line">		SimpleEventListener listener = <span class="keyword">new</span> SimpleEventListener();</div><div class="line">		bus.register(listener);</div><div class="line"></div><div class="line">		bus.post(<span class="keyword">new</span> SimpleEvent(<span class="string">"hello"</span>));</div><div class="line">		bus.post(<span class="keyword">new</span> SimpleEvent(<span class="string">"world"</span>));</div><div class="line">		bus.post(<span class="keyword">new</span> SimpleEvent(<span class="string">"!"</span>));</div><div class="line">		bus.post(<span class="keyword">new</span> Long(<span class="number">2</span>));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>参考:</p>
<ul>
<li><a href="http://www.cnblogs.com/peida/p/EventBus.html" target="_blank" rel="external">Guava学习笔记：EventBus</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;   观察者模式是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model
    
    </summary>
    
      <category term="Design_Patterns" scheme="http://wiki.jassassin.com/categories/Design-Patterns/"/>
    
    
  </entry>
  
  <entry>
    <title>shell</title>
    <link href="http://wiki.jassassin.com/2015/11/06/linux/shell/"/>
    <id>http://wiki.jassassin.com/2015/11/06/linux/shell/</id>
    <published>2015-11-06T03:08:51.000Z</published>
    <updated>2016-08-11T05:46:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>(1) 使用一个定义过的变量，只要在变量名前面加美元符号（$）即可.变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界.<br>(2) 只读变量，使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变<br>(3) 删除变量, 使用 unset 命令可以删除变量。变量被删除后不能再次使用；unset 命令不能删除只读变量。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"I am good at <span class="variable">$&#123;skill&#125;</span>Script"</span></div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="comment"># readonly,unset</span></div><div class="line">ro=<span class="string">"ro"</span></div><div class="line">un=<span class="string">"unset"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"before readonly ro:<span class="variable">$&#123;ro&#125;</span>, unset un:<span class="variable">$&#123;un&#125;</span>"</span></div><div class="line"></div><div class="line"><span class="built_in">unset</span> un</div><div class="line"><span class="built_in">readonly</span> ro</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"unset un:<span class="variable">$&#123;un&#125;</span>"</span></div><div class="line">ro=<span class="string">"unro"</span></div><div class="line"></div><div class="line">------------------ 输出 ------------------</div><div class="line">I am good at AdaScript</div><div class="line">I am good at CoffeScript</div><div class="line">I am good at ActionScript</div><div class="line">I am good at JavaScript</div><div class="line">before <span class="built_in">readonly</span> ro:ro, <span class="built_in">unset</span> un:<span class="built_in">unset</span></div><div class="line"><span class="built_in">unset</span> un:</div><div class="line">variable.sh: 18: variable.sh: ro: is <span class="built_in">read</span> only</div></pre></td></tr></table></figure>
<h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$0</td>
<td style="text-align:left">当前脚本的文件名</td>
</tr>
<tr>
<td style="text-align:left">$n</td>
<td style="text-align:left">传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。</td>
</tr>
<tr>
<td style="text-align:left">$#</td>
<td style="text-align:left">传递给脚本或函数的参数个数。</td>
</tr>
<tr>
<td style="text-align:left">$*</td>
<td style="text-align:left">传递给脚本或函数的所有参数。</td>
</tr>
<tr>
<td style="text-align:left">$@</td>
<td style="text-align:left">传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同。</td>
</tr>
<tr>
<td style="text-align:left">$?</td>
<td style="text-align:left">上个命令的退出状态，或函数的返回值。</td>
</tr>
<tr>
<td style="text-align:left">$$</td>
<td style="text-align:left">当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID</td>
</tr>
</tbody>
</table>
<ul>
<li>$<em> 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以”$1” “$2” … “$n” 的形式输出所有参数。但是当它们被双引号(“ “)包含时，”$</em>“ 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@” 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数 *<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">curr_file_name=<span class="variable">$0</span></div><div class="line">input_params_count=<span class="variable">$#</span></div><div class="line">curr_pro_id=$$</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"current bash file name:<span class="variable">$&#123;curr_file_name&#125;</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"current progress id:<span class="variable">$&#123;curr_pro_id&#125;</span>"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"input params count:<span class="variable">$&#123;input_params_count&#125;</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"\$@ = <span class="variable">$@</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"\$* = $*"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"\$? = $?"</span></div><div class="line"></div><div class="line">----------------- 输出 -----------------</div><div class="line">current bash file name:variable.sh</div><div class="line">current progress id:11431</div><div class="line">input params count:3</div><div class="line"><span class="variable">$@</span> = 1 2 3</div><div class="line">$* = 1 2 3</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="替换变量和命令"><a href="#替换变量和命令" class="headerlink" title="替换变量和命令"></a>替换变量和命令</h3><p>(1) 命令替换: 是指Shell可以先执行命令，将输出结果暂时保存，在适当的地方输出。<br>(2) 变量替换: 可以根据变量的状态（是否为空、是否定义等）来改变它的值</p>
<table>
<thead>
<tr>
<th style="text-align:left">形式</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">${var}</td>
<td style="text-align:left">变量本来的值</td>
</tr>
<tr>
<td style="text-align:left">${var:-word}</td>
<td style="text-align:left">如果变量 var 为空或已被删除(unset)，那么返回 word，但不改变 var 的值。</td>
</tr>
<tr>
<td style="text-align:left">${var:=word}</td>
<td style="text-align:left">如果变量 var 为空或已被删除(unset)，那么返回 word，并将 var 的值设置为 word。</td>
</tr>
<tr>
<td style="text-align:left">${var:+word}</td>
<td style="text-align:left">如果变量 var 被定义，那么返回 word，但不改变 var 的值</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"current date: `date`"</span></div><div class="line"></div><div class="line">age=<span class="variable">$&#123;p1:-20&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Undefined p1 for \$&#123;p1:-20&#125; = <span class="variable">$&#123;age&#125;</span>, p1 = <span class="variable">$&#123;p1&#125;</span>"</span></div><div class="line"></div><div class="line">num=<span class="variable">$&#123;p2:=30&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Undefined p2 for \$&#123;p2:=30&#125; = <span class="variable">$&#123;num&#125;</span>, p2 = <span class="variable">$&#123;p2&#125;</span>"</span></div><div class="line"></div><div class="line">count=<span class="variable">$&#123;num:+40&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"defined num for \$&#123;num:+40&#125; = <span class="variable">$&#123;count&#125;</span>, num = <span class="variable">$&#123;num&#125;</span>"</span></div><div class="line"></div><div class="line">val=<span class="variable">$&#123;p3:+50&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Undefined p3 for \$&#123;p3:+50&#125; = <span class="variable">$&#123;val&#125;</span>, p3 = <span class="variable">$&#123;p3&#125;</span>"</span></div><div class="line"></div><div class="line">----------------- 输出-----------------</div><div class="line">current date: 2015年 11月 06日 星期五 15:14:32 CST</div><div class="line">Undefined p1 <span class="keyword">for</span> <span class="variable">$&#123;p1:-20&#125;</span> = 20, p1 =</div><div class="line">Undefined p2 <span class="keyword">for</span> <span class="variable">$&#123;p2:=30&#125;</span> = 30, p2 = 30</div><div class="line">defined num <span class="keyword">for</span> <span class="variable">$&#123;num:+40&#125;</span> = 40, num = 30</div><div class="line">Undefined p3 <span class="keyword">for</span> <span class="variable">$&#123;p3:+50&#125;</span> = , p3 =</div></pre></td></tr></table></figure>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p><code>expr</code>是一款表达式计算工具，使用它能完成表达式的求值操作.注意表达式和运算符之间要有空格.如”2+2”是错误的，应该是”2 + 2”(空格).同时整个表达式要用”`”括起来！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">p1=1</div><div class="line">p2=2</div><div class="line"></div><div class="line">val=`expr <span class="variable">$p1</span> + <span class="variable">$p2</span>`</div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;p1&#125;</span> + <span class="variable">$&#123;p2&#125;</span> = <span class="variable">$&#123;val&#125;</span>"</span></div><div class="line"></div><div class="line">val=`expr <span class="variable">$p1</span> - <span class="variable">$p2</span>`</div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;p1&#125;</span> - <span class="variable">$&#123;p2&#125;</span> = <span class="variable">$&#123;val&#125;</span>"</span></div><div class="line"></div><div class="line">val=`expr <span class="variable">$p1</span> \* <span class="variable">$p2</span>`</div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;p1&#125;</span> * <span class="variable">$&#123;p2&#125;</span> = <span class="variable">$&#123;val&#125;</span>"</span></div><div class="line"></div><div class="line">val=`expr <span class="variable">$p1</span> / <span class="variable">$p2</span>`</div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;p1&#125;</span> / <span class="variable">$&#123;p2&#125;</span> = <span class="variable">$&#123;val&#125;</span>"</span></div><div class="line"></div><div class="line">----------------- 输出 -----------------</div><div class="line">1 + 2 = 3</div><div class="line">1 - 2 = -1</div><div class="line">1 * 2 = 2</div><div class="line">1 / 2 = 0</div></pre></td></tr></table></figure></p>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">a=1</div><div class="line">b=2</div><div class="line">c=1</div><div class="line"></div><div class="line"><span class="comment"># -eq	检测两个数是否相等，相等返回 true。</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> <span class="_">-eq</span> <span class="variable">$b</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;a&#125;</span> == <span class="variable">$&#123;b&#125;</span>"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;a&#125;</span> != <span class="variable">$&#123;b&#125;</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># -ne	检测两个数是否相等，不相等返回 true。</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> <span class="_">-ne</span> <span class="variable">$b</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;a&#125;</span> != <span class="variable">$&#123;b&#125;</span>"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;a&#125;</span> == <span class="variable">$&#123;b&#125;</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># -gt	检测左边的数是否大于右边的，如果是，则返回 true。</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$b</span> <span class="_">-gt</span> <span class="variable">$a</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;b&#125;</span> &gt; <span class="variable">$&#123;a&#125;</span>"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;b&#125;</span> &lt;= <span class="variable">$&#123;a&#125;</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># -ge	检测左边的数是否大等于右边的，如果是，则返回 true。</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$c</span> -ge <span class="variable">$a</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;c&#125;</span> &gt;= <span class="variable">$&#123;a&#125;</span>"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;c&#125;</span> &lt; <span class="variable">$&#123;a&#125;</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># -lt	检测左边的数是否小于右边的，如果是，则返回 true。</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$b</span> <span class="_">-lt</span> <span class="variable">$a</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;b&#125;</span> &lt; <span class="variable">$&#123;a&#125;</span>"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;b&#125;</span> &gt;= <span class="variable">$&#123;a&#125;</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># -le	检测左边的数是否小于等于右边的，如果是，则返回 true</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$c</span> <span class="_">-lt</span> <span class="variable">$a</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;c&#125;</span> &lt;= <span class="variable">$&#123;a&#125;</span>"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;c&#125;</span> &gt; <span class="variable">$&#123;a&#125;</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment">##################### 输出 #########################</span></div><div class="line">1 != 2</div><div class="line">1 != 2</div><div class="line">2 &gt; 1</div><div class="line">1 &gt;= 1</div><div class="line">2 &gt;= 1</div><div class="line">1 &gt; 1</div></pre></td></tr></table></figure></p>
<h3 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h3><p><code>!</code>非,<code>-a</code>与,<code>-o</code>或<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">d=0</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$d</span> <span class="_">-gt</span> 0 <span class="_">-a</span> <span class="variable">$d</span> <span class="_">-lt</span> 3 ]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"0 &lt; <span class="variable">$&#123;d&#125;</span> &lt; 3"</span></div><div class="line"><span class="keyword">elif</span> [ <span class="variable">$d</span> <span class="_">-lt</span> 0 -o <span class="variable">$d</span> <span class="_">-gt</span> 3 ]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;d&#125;</span> &lt; 0 | <span class="variable">$&#123;d&#125;</span> &gt; 3"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;d&#125;</span> == 0 | <span class="variable">$&#123;d&#125;</span> == 3"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">----------------- 输出-----------------</div><div class="line">0 == 0 | 0 == 3</div></pre></td></tr></table></figure></p>
<h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">msg1=<span class="string">"hello"</span></div><div class="line">msg2=<span class="string">"world"</span></div><div class="line">msg3=<span class="string">"world"</span></div><div class="line">msg4=<span class="string">""</span></div><div class="line"></div><div class="line"><span class="comment"># =	检测两个字符串是否相等，相等返回 true。</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;msg1&#125;</span> = <span class="variable">$&#123;msg2&#125;</span> ]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;msg1&#125;</span> = <span class="variable">$&#123;msg2&#125;</span>"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;msg1&#125;</span> != <span class="variable">$&#123;msg2&#125;</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># -z	检测字符串长度是否为0，为0返回 true。</span></div><div class="line"><span class="keyword">if</span> [ -z <span class="variable">$&#123;msg4&#125;</span> ]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"msg4's length is 0!"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># -n	检测字符串长度是否为0，不为0返回 true。</span></div><div class="line"><span class="keyword">if</span> [ -n <span class="variable">$&#123;msg3&#125;</span> ]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;msg3&#125;</span> is not null!"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">----------------- 输出 -----------------</div><div class="line">hello != world</div><div class="line">msg4<span class="string">'s length is 0!</span></div><div class="line">world is not null!</div></pre></td></tr></table></figure>
<p><em>注意未定义字符串的判断</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ -z <span class="variable">$a</span> ]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"Undefined a length is 0!"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ -n <span class="variable">$a</span> ]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"Undefined a length is not 0!"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$a</span>"</span> ]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"Undefined a length is 0!"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$a</span>"</span> ]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"Undefined a length is not 0!"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># 如果a为空或者没有赋值，那么a的值赋为0 (鸟哥的私房菜基础篇379页)</span></div><div class="line">a=<span class="variable">$&#123;a:-0&#125;</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> <span class="_">-eq</span> 0 ]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"\$a is null!"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">----------------- 输出 -----------------</div><div class="line">Undefined a length is 0!</div><div class="line">Undefined a length is not 0!</div><div class="line">Undefined a length is 0!</div><div class="line">Undefined a length is 0!</div><div class="line"><span class="variable">$a</span> is null!</div></pre></td></tr></table></figure></p>
<h3 id="文件测试运算"><a href="#文件测试运算" class="headerlink" title="文件测试运算"></a>文件测试运算</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">file=<span class="string">"/home/eagle/myspace/exercise/shell/demo.sh"</span></div><div class="line"></div><div class="line"><span class="comment"># -e file 检测文件（包括目录）是否存在，如果是，则返回 true。</span></div><div class="line"><span class="keyword">if</span> [ <span class="_">-e</span> <span class="variable">$file</span> ]; <span class="keyword">then</span></div><div class="line"></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$file</span> exists!"</span></div><div class="line"></div><div class="line">	<span class="comment"># -d file 检测文件是否是目录，如果是，则返回 true。</span></div><div class="line">	<span class="keyword">if</span> [ <span class="_">-d</span> <span class="variable">$file</span> ];<span class="keyword">then</span></div><div class="line"></div><div class="line">		<span class="built_in">echo</span> <span class="string">"<span class="variable">$file</span> is directory!"</span></div><div class="line"></div><div class="line">	<span class="comment"># -f file 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</span></div><div class="line">	<span class="keyword">elif</span> [ <span class="_">-f</span> <span class="variable">$file</span> ]; <span class="keyword">then</span></div><div class="line"></div><div class="line">		<span class="built_in">echo</span> <span class="string">"<span class="variable">$file</span> is file!"</span></div><div class="line"></div><div class="line">		<span class="comment"># -s file 检测文件是否为空（文件大小是否大于0），不为空返回 true。</span></div><div class="line">		<span class="keyword">if</span> [ <span class="_">-s</span> <span class="variable">$file</span> ]; <span class="keyword">then</span></div><div class="line"></div><div class="line">			<span class="built_in">echo</span> <span class="string">"<span class="variable">$file</span> is not null!"</span></div><div class="line"></div><div class="line">			<span class="comment"># -r file 检测文件是否可读，如果是，则返回 true。</span></div><div class="line">			<span class="keyword">if</span> [ -r <span class="variable">$file</span> ]; <span class="keyword">then</span></div><div class="line"></div><div class="line">				<span class="built_in">echo</span> <span class="string">"<span class="variable">$file</span> can be read!"</span></div><div class="line"></div><div class="line">			<span class="keyword">fi</span></div><div class="line"></div><div class="line">		<span class="keyword">fi</span></div><div class="line"></div><div class="line">	<span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$file</span> not exists!"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">----------------- 输出 -----------------</div><div class="line">/home/eagle/myspace/exercise/shell/demo.sh exists!</div><div class="line">/home/eagle/myspace/exercise/shell/demo.sh is file!</div><div class="line">/home/eagle/myspace/exercise/shell/demo.sh is not null!</div><div class="line">/home/eagle/myspace/exercise/shell/demo.sh can be <span class="built_in">read</span>!</div></pre></td></tr></table></figure>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>引号<br>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；单引号字串中不能出现单引号（对单引号使用转义符后也不行）<br>双引号里可以有变量；双引号里可以出现转义字符</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">msg=<span class="string">"hello world!"</span></div><div class="line"></div><div class="line"><span class="comment"># 获取字符串长度</span></div><div class="line">msg_length=<span class="variable">$&#123;#msg&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># 获取字符位置</span></div><div class="line">w_index=`expr index <span class="string">"<span class="variable">$&#123;msg&#125;</span>"</span> w`</div><div class="line"></div><div class="line"><span class="comment"># "#"从左边第一次出现查询字符o截取，保留右边字符</span></div><div class="line">sub_msg=<span class="variable">$&#123;msg#*o&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># "##"从左边最后一次出现查询字符o截取，保留右边字符</span></div><div class="line">sub_msg2=<span class="variable">$&#123;msg##*o&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># "%"从右边第一次出现查询字符o截取，保留左边字符</span></div><div class="line">sub_msg3=<span class="variable">$&#123;msg%o*&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># "%%"从右边最后一次出现查询字符o截取，保留左边字符</span></div><div class="line">sub_msg4=<span class="variable">$&#123;msg%%o*&#125;</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;msg&#125;</span> length: <span class="variable">$&#123;msg_length&#125;</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"w index of <span class="variable">$&#123;msg&#125;</span> is <span class="variable">$&#123;w_index&#125;</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"sub_msg:<span class="variable">$&#123;sub_msg&#125;</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"sub_msg2:<span class="variable">$&#123;sub_msg2&#125;</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"sub_msg3:<span class="variable">$&#123;sub_msg3&#125;</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"sub_msg4:<span class="variable">$&#123;sub_msg4&#125;</span>"</span></div><div class="line"></div><div class="line">-----------------输出-----------------</div><div class="line">hello world! length: 12</div><div class="line">w index of hello world! is 7</div><div class="line">sub_msg: world!</div><div class="line">sub_msg2:rld!</div><div class="line">sub_msg3:hello w</div><div class="line">sub_msg4:hell</div></pre></td></tr></table></figure>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。类似与C语言，数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#数组定义方式1</span></div><div class="line">str_arr=(<span class="string">"hello"</span> <span class="string">"world"</span> <span class="string">"!"</span>)</div><div class="line"></div><div class="line"><span class="comment">#数组定义方式2</span></div><div class="line">num_arr[0]=1</div><div class="line">num_arr[1]=2</div><div class="line">num_arr[2]=3</div><div class="line"></div><div class="line"><span class="comment"># 获取数组中的所有元素</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"str_arr:<span class="variable">$&#123;str_arr[*]&#125;</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"num_arr:<span class="variable">$&#123;num_arr[@]&#125;</span>"</span></div><div class="line"></div><div class="line"><span class="comment"># 获取数组长度</span></div><div class="line">str_arr_length=<span class="variable">$&#123;#str_arr[*]&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"str_arr array length:<span class="variable">$&#123;str_arr_length&#125;</span>"</span></div><div class="line"></div><div class="line">-----------------输出 -----------------</div><div class="line">str_arr:hello world !</div><div class="line">num_arr:1 2 3</div><div class="line">str_arr array length:3</div></pre></td></tr></table></figure></p>
<h3 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h3><p>printf 由POSIX标准所定义，移植性要比echo好.<br>printf 不像echo那样会自动换行，必须显式添加换行符(\n)。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">n1=1</div><div class="line">n2=2</div><div class="line">s1=<span class="string">"a"</span></div><div class="line">s2=<span class="string">"b"</span></div><div class="line"></div><div class="line"><span class="built_in">printf</span> <span class="string">"%d %s \n"</span> <span class="variable">$n1</span> <span class="variable">$s1</span> <span class="variable">$n2</span>  <span class="variable">$s2</span></div><div class="line"></div><div class="line"><span class="comment"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span></div><div class="line"><span class="built_in">printf</span> <span class="string">"%d %s \n"</span></div><div class="line"></div><div class="line"><span class="comment"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出</span></div><div class="line"><span class="built_in">printf</span> <span class="string">"%s"</span> a b c</div><div class="line"></div><div class="line">-----------------输出-----------------</div><div class="line">1 a</div><div class="line">2 b</div><div class="line">0</div></pre></td></tr></table></figure>
<h3 id="case-esac语句"><a href="#case-esac语句" class="headerlink" title="case esac语句"></a>case esac语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 读取输入，根据输入数字判断星期几。如果都不匹配则是非法数字。</span></div><div class="line"><span class="built_in">read</span> num</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="variable">$num</span> <span class="keyword">in</span></div><div class="line">	1 )</div><div class="line">		<span class="built_in">echo</span> <span class="string">"today is Monday!"</span></div><div class="line">		;;</div><div class="line">	2 )</div><div class="line">		<span class="built_in">echo</span> <span class="string">"today is Tuesday!"</span></div><div class="line">		;;</div><div class="line">	3 )</div><div class="line">		<span class="built_in">echo</span> <span class="string">"today is Wednesday!"</span></div><div class="line">		;;</div><div class="line">	4 )</div><div class="line">		<span class="built_in">echo</span> <span class="string">"today is Thursday!"</span></div><div class="line">		;;</div><div class="line">	5 )</div><div class="line">		<span class="built_in">echo</span> <span class="string">"today is Friday!"</span></div><div class="line">		;;</div><div class="line">	6 )</div><div class="line">		<span class="built_in">echo</span> <span class="string">"today is Saturday!"</span></div><div class="line">		;;</div><div class="line">	7 )</div><div class="line">		<span class="built_in">echo</span> <span class="string">"today is Sunday!"</span></div><div class="line">		;;</div><div class="line">	<span class="comment"># 当以上所有都不匹配时执行</span></div><div class="line">	* )</div><div class="line">		<span class="built_in">echo</span> <span class="string">"invalid numbser!"</span></div><div class="line">	;;</div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure>
<h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><ol>
<li>break<br>break命令允许跳出所有循环（终止执行后面的所有循环.<code>break n</code>代表跳出几层循环。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 读取键盘输入的数字直到该数字是[1,5]</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> :</div><div class="line"><span class="keyword">do</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"input one number between 1 to 5"</span></div><div class="line">	<span class="built_in">read</span> number</div><div class="line">	<span class="keyword">case</span> <span class="variable">$number</span> <span class="keyword">in</span></div><div class="line">		1|2|3|4|5)</div><div class="line">			<span class="built_in">echo</span> <span class="string">"valid number:<span class="variable">$&#123;number&#125;</span>"</span></div><div class="line">			<span class="built_in">break</span></div><div class="line">			;;</div><div class="line">	<span class="keyword">esac</span></div><div class="line"></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>2.continue<br>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环.continue 后面也可以跟一个数字，表示跳出第几层循环。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">arr=(1 2 3 4 5)</div><div class="line"></div><div class="line"><span class="keyword">for</span> number <span class="keyword">in</span> <span class="variable">$&#123;arr[*]&#125;</span></div><div class="line"><span class="keyword">do</span></div><div class="line">	<span class="built_in">echo</span> <span class="variable">$number</span></div><div class="line">	m=`expr <span class="variable">$number</span> % 2`</div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$&#123;m&#125;</span> <span class="_">-eq</span> 0 ]; <span class="keyword">then</span></div><div class="line">	 	<span class="built_in">echo</span> <span class="string">"find even number:<span class="variable">$&#123;number&#125;</span>"</span></div><div class="line">	 	<span class="built_in">continue</span></div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"find odd number:<span class="variable">$&#123;number&#125;</span>"</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>find命令可以沿着文件层次结构向下遍历，匹配符合条件的文件，并执行相应的操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在执行find命令的当前目录下查找文件名以md结尾的文件</span></div><div class="line">$ find . -name <span class="string">"*.md"</span></div><div class="line"><span class="comment"># 同上，只是iname不区分字母大小写</span></div><div class="line">$ find . -iname <span class="string">"*.md"</span></div><div class="line"><span class="comment"># 查询以".md"或".sh"结尾的文件</span></div><div class="line">$ find . \( -name <span class="string">"*.md"</span> -o  -name <span class="string">"*.sh"</span> \)</div><div class="line"><span class="comment"># 查询非".md"结尾的文件</span></div><div class="line">$ find . ！-name <span class="string">"*.md"</span></div></pre></td></tr></table></figure></p>
<ul>
<li>-maxdepth 指定最大深度，find默认会查询当前目录以及所有子目录。</li>
<li>-mindepth 指定最小深度</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 只查询当前目录，注意如果-type在-maxdepth之前，则linux会先查找所有文件然后再过滤最大深度</span></div><div class="line">$ find . -maxdepth 1 -name <span class="string">"*.sh"</span> -type f</div><div class="line">$ find . -mindepth 2 -name <span class="string">"*.sh"</span> -type f</div></pre></td></tr></table></figure>
<ul>
<li>根据文件相关时间进行搜索:-atime,-ctime,-mtime单位:天，-amin,-cmin,-min单位:分钟</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 当前目录下，最近3天被访问的文件</span></div><div class="line">$ find . -type f -atime -3</div><div class="line"><span class="comment"># 最近一天被修改</span></div><div class="line">$ find . -type f -mtime -1</div></pre></td></tr></table></figure>
<ul>
<li>基于文件大小搜索:k(kb),-b(byte),-M(mbyte),-G(gbyte)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 等于10k</span></div><div class="line">$ find . -type f -size 10k</div><div class="line"><span class="comment"># 大于10k</span></div><div class="line">$ find . -type f -size +10k</div><div class="line"><span class="comment"># 小于10k</span></div><div class="line">$ find . -type f -size -10k</div></pre></td></tr></table></figure>
<ul>
<li>删除匹配文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find . -type f -name <span class="string">"*.txt"</span> -delete</div></pre></td></tr></table></figure>
<ul>
<li>find结合-exec参数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将以".md"结尾的文件拷贝到bak目录下，注意后面要有"\;"</span></div><div class="line">$ find . -type f -name <span class="string">"*.md"</span> -exec cp &#123;&#125; bak \;</div></pre></td></tr></table></figure>
<h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><p>通过管道符(|)，可以将一个命令的标准输入转换为另一个命令的标准输入。但，对于某些命令必须以参数的方式提供，此时便可通过xargs来实现。</p>
<ul>
<li>xargs将接收到的命令参数重新格式化</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将多行输入转成单行输出(将\n用" "替换)</span></div><div class="line">$ cat shell.md | xargs</div><div class="line"><span class="comment"># 通过下面的命令可以将单行输入通过" "分隔，指定每行参数个数</span></div><div class="line">$ cat shell.md | xargs -n 3</div><div class="line"><span class="comment"># -d 指定自定义分隔符</span></div><div class="line">$ <span class="built_in">echo</span> <span class="string">"helloworldhelloworld"</span> | xargs <span class="_">-d</span> o -n 1</div></pre></td></tr></table></figure>
<ul>
<li>参数输入</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ cat params.txt</div><div class="line">hello</div><div class="line">java</div><div class="line">world</div><div class="line">python</div><div class="line"></div><div class="line"><span class="comment"># 将该文件中的所有内容作为参数</span></div><div class="line">$ cat parmas.txt | xargs -n 1 <span class="built_in">echo</span></div><div class="line"><span class="comment"># 参数替换</span></div><div class="line">$ cat parmas.txt | xargs -I &#123;&#125; <span class="built_in">echo</span> a-&#123;&#125;</div><div class="line"></div><div class="line">a-hello</div><div class="line">a-java</div><div class="line">a-world</div><div class="line">a-python</div></pre></td></tr></table></figure>
<h3 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h3><p>tr可对标准输入的字符进行替换、删除以及压缩。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 大写转小写</span></div><div class="line">$ <span class="built_in">echo</span> <span class="string">"WHO ARE YOU"</span> | tr <span class="string">'A-Z'</span> <span class="string">'a-z'</span></div><div class="line"><span class="comment"># 去除数字</span></div><div class="line">$ <span class="built_in">echo</span> <span class="string">"WHO 3 4 ARE YOU"</span> | tr <span class="_">-d</span> <span class="string">'0-9'</span></div><div class="line"><span class="comment"># 压缩空白字符</span></div><div class="line">$ <span class="built_in">echo</span> <span class="string">"WHO 3 4    ARE    YOU"</span> | tr <span class="_">-s</span> <span class="string">' '</span></div><div class="line">输出: WHO 3 4 ARE YOU</div></pre></td></tr></table></figure></p>
<h3 id="sort和uniq"><a href="#sort和uniq" class="headerlink" title="sort和uniq"></a>sort和uniq</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">$ cat a.dat</div><div class="line">jack 78</div><div class="line">rose 79</div><div class="line">tony 79</div><div class="line">rose 79</div><div class="line"></div><div class="line">$ sort a.data | uniq</div><div class="line">jack 78</div><div class="line">rose 79</div><div class="line">tony 79</div><div class="line"></div><div class="line"><span class="comment"># 按数字倒序排列</span></div><div class="line">$ sort -nr a.dat</div><div class="line">tony 79</div><div class="line">rose 79</div><div class="line">rose 79</div><div class="line">jack 78</div><div class="line"></div><div class="line"><span class="comment"># 按照第二列排序</span></div><div class="line">$ sort -k 2 a.dat</div><div class="line">jack 78</div><div class="line">rose 79</div><div class="line">rose 79</div><div class="line">tony 79</div><div class="line"></div><div class="line"><span class="comment"># -c该行的重复次数</span></div><div class="line">$ sort a.dat | uniq -c</div><div class="line">1 jack 78</div><div class="line">2 rose 79</div><div class="line">1 tony 79</div><div class="line"></div><div class="line"><span class="comment"># 找出重复的行</span></div><div class="line">$ sort a.dat | uniq <span class="_">-d</span></div><div class="line">rose 79</div></pre></td></tr></table></figure>
<p><em>uniq只能用于已经拍过序的数据输入</em></p>
<h3 id="RADNOM生成随机数"><a href="#RADNOM生成随机数" class="headerlink" title="RADNOM生成随机数"></a>RADNOM生成随机数</h3><h3 id="文件拆分"><a href="#文件拆分" class="headerlink" title="文件拆分"></a>文件拆分</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ ll a.dat</div><div class="line">-rw-r--r-- 1 eagle eagle 32 11月 10 13:51 a.dat</div><div class="line"></div><div class="line"><span class="comment"># 将a.dat按照单个文件10byte拆分</span></div><div class="line">$ split -b 10 a.dat</div><div class="line">-rw-r--r-- 1 eagle eagle   10 11月 10 14:32 xaa</div><div class="line">-rw-r--r-- 1 eagle eagle   10 11月 10 14:32 xab</div><div class="line">-rw-r--r-- 1 eagle eagle   10 11月 10 14:32 xac</div><div class="line">-rw-r--r-- 1 eagle eagle    2 11月 10 14:32 xad</div><div class="line"></div><div class="line"><span class="comment"># -d 分割后的文件名以数字为后缀 -a 后缀长度 a_自定义前缀</span></div><div class="line">$ split -b 10 a.dat <span class="_">-d</span> <span class="_">-a</span> 4 a</div><div class="line">-rw-r--r-- 1 eagle eagle   10 11月 10 14:43 a_0000</div><div class="line">-rw-r--r-- 1 eagle eagle   10 11月 10 14:43 a_0001</div><div class="line">-rw-r--r-- 1 eagle eagle   10 11月 10 14:43 a_0002</div><div class="line">-rw-r--r-- 1 eagle eagle    2 11月 10 14:43 a_0003</div><div class="line"></div><div class="line"><span class="comment"># 按照文件行数分隔 -l 行数</span></div><div class="line">$ split <span class="_">-l</span> 2 a.dat</div></pre></td></tr></table></figure>
<p>截取文件前后缀:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">file_name=some.jpg</div><div class="line">file_name_prefix=<span class="variable">$&#123;file_name%.*&#125;</span></div><div class="line">file_name_subfix=<span class="variable">$&#123;file_name#*.&#125;</span></div></pre></td></tr></table></figure></p>
<h2 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h2><h3 id="生成指定大小的文件"><a href="#生成指定大小的文件" class="headerlink" title="生成指定大小的文件"></a>生成指定大小的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># if文件输入(input file), of(output file),bs文件大小(字节), count bs大小倍数</span></div><div class="line">$  dd <span class="keyword">if</span>=/dev/zero of=junk.data bs=10M count=1</div><div class="line">1+0 records <span class="keyword">in</span></div><div class="line">1+0 records out</div><div class="line">10485760 bytes (10 MB) copied, 0.0128509 s, 816 MB/s</div></pre></td></tr></table></figure>
<h3 id="文本文件交集和差集"><a href="#文本文件交集和差集" class="headerlink" title="文本文件交集和差集"></a>文本文件交集和差集</h3><p><code>comm</code>,参与比较的两个文件必须事先已被排过序!<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">$ cat a.dat</div><div class="line">s</div><div class="line">t</div><div class="line">q</div><div class="line">c</div><div class="line">g</div><div class="line">t</div><div class="line">o</div><div class="line">$ cat b.dat</div><div class="line">g</div><div class="line">g</div><div class="line">r</div><div class="line">c</div><div class="line">h</div><div class="line">s</div><div class="line">o</div><div class="line"></div><div class="line"><span class="comment"># 文件排序</span></div><div class="line">$ sort a.dat -o a.dat; sort b.dat -o b.dat</div><div class="line"></div><div class="line"><span class="comment"># 比较结果: 只在a.dat出现的字符	只在b.dat出现的字符	两个文件交集</span></div><div class="line">$ comm a.dat b.dat</div><div class="line">		c</div><div class="line">		g</div><div class="line">	g</div><div class="line">	h</div><div class="line">		o</div><div class="line">q</div><div class="line">	r</div><div class="line">		s</div><div class="line">t</div><div class="line">t</div><div class="line"></div><div class="line"><span class="comment"># 从输出结果中删除第一和第二列，得出的结果即为两者交集</span></div><div class="line">$ comm a.dat b.dat -1 -2</div><div class="line">c</div><div class="line">g</div><div class="line">o</div><div class="line">s</div></pre></td></tr></table></figure></p>
<h3 id="统计文件行数和单词数以及字符数"><a href="#统计文件行数和单词数以及字符数" class="headerlink" title="统计文件行数和单词数以及字符数"></a>统计文件行数和单词数以及字符数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 行数</span></div><div class="line">$ wc <span class="_">-l</span> a.dat</div><div class="line">7 a.dat</div><div class="line"></div><div class="line"><span class="comment"># 字符数</span></div><div class="line">$ wc -c a.dat</div><div class="line">14 a.dat</div><div class="line"></div><div class="line"><span class="comment"># 单词数</span></div><div class="line">$ wc -w a.dat</div><div class="line">7 a.dat</div><div class="line"></div><div class="line"><span class="comment"># 打印最长行的长度</span></div><div class="line">$ wc demo.sh -L</div><div class="line">40 demo.sh</div></pre></td></tr></table></figure>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><img src="/imgs/linux/reg.jpg" alt="reg"><br><img src="/imgs/linux/reg2.jpg" alt="reg2"></p>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$ grep <span class="string">".jpg"</span> demo.sh</div><div class="line">file_name=some.jpg<span class="string">'</span></div><div class="line"></div><div class="line"># 反向</div><div class="line">$ grep -v ".jpg" demo.sh</div><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">file_name_prefix=$&#123;file_name%.*&#125;</div><div class="line">file_name_subfix=$&#123;file_name#*.&#125;</div><div class="line"></div><div class="line">echo filename:$&#123;file_name&#125;</div><div class="line">echo filename prefix:$&#123;file_name_prefix&#125;</div><div class="line">echo filename subfix:$&#123;file_name_subfix&#125;</div><div class="line"></div><div class="line"># 包含搜索关键词的行数</div><div class="line">$ grep -c "file" demo.sh</div><div class="line">6</div><div class="line"></div><div class="line">$ grep -n "file" demo.sh</div><div class="line">3:file_name=some.jpg</div><div class="line">5:file_name_prefix=$&#123;file_name%.*&#125;</div><div class="line">6:file_name_subfix=$&#123;file_name#*.&#125;</div><div class="line">8:echo filename:$&#123;file_name&#125;</div><div class="line">9:echo filename prefix:$&#123;file_name_prefix&#125;</div><div class="line">10:echo filename subfix:$&#123;file_name_subfix&#125;</div></pre></td></tr></table></figure>
<ul>
<li>递归搜索</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ grep <span class="string">"file"</span> . -R -n</div><div class="line">./shell/demo.sh:3:file_name=some.jpg</div><div class="line">./shell/demo.sh:5:file_name_prefix=<span class="variable">$&#123;file_name%.*&#125;</span></div><div class="line">./shell/demo.sh:6:file_name_subfix=<span class="variable">$&#123;file_name#*.&#125;</span></div><div class="line">./shell/demo.sh:8:<span class="built_in">echo</span> filename:<span class="variable">$&#123;file_name&#125;</span></div><div class="line">./shell/demo.sh:9:<span class="built_in">echo</span> filename prefix:<span class="variable">$&#123;file_name_prefix&#125;</span></div><div class="line">./shell/demo.sh:10:<span class="built_in">echo</span> filename subfix:<span class="variable">$&#123;file_name_subfix&#125;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 多个匹配模式 -e</span></div><div class="line">$ grep <span class="_">-e</span> <span class="string">"prefix"</span> <span class="_">-e</span> <span class="string">"subfix"</span> . -R -n</div><div class="line">./shell/demo.sh:5:file_name_prefix=<span class="variable">$&#123;file_name%.*&#125;</span></div><div class="line">./shell/demo.sh:6:file_name_subfix=<span class="variable">$&#123;file_name#*.&#125;</span></div><div class="line">./shell/demo.sh:9:<span class="built_in">echo</span> filename prefix:<span class="variable">$&#123;file_name_prefix&#125;</span></div><div class="line">./shell/demo.sh:10:<span class="built_in">echo</span> filename subfix:<span class="variable">$&#123;file_name_subfix&#125;</span></div></pre></td></tr></table></figure>
<ul>
<li>grep中包含或排除文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ grep <span class="string">"file_name"</span> . -R -n --include *.&#123;md&#125;</div><div class="line">$ grep <span class="string">"file_name"</span> . -R -n --exclude *.&#123;md&#125;</div><div class="line">./shell/demo.sh:3:file_name=some.jpg</div><div class="line">./shell/demo.sh:5:file_name_prefix=<span class="variable">$&#123;file_name%.*&#125;</span></div><div class="line">./shell/demo.sh:6:file_name_subfix=<span class="variable">$&#123;file_name#*.&#125;</span></div><div class="line">./shell/demo.sh:8:<span class="built_in">echo</span> filename:<span class="variable">$&#123;file_name&#125;</span></div><div class="line">./shell/demo.sh:9:<span class="built_in">echo</span> filename prefix:<span class="variable">$&#123;file_name_prefix&#125;</span></div><div class="line">./shell/demo.sh:10:<span class="built_in">echo</span> filename subfix:<span class="variable">$&#123;file_name_subfix&#125;</span></div></pre></td></tr></table></figure>
<ul>
<li>打印匹配文件之前之后的行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 包含匹配之前两行</span></div><div class="line">$ cat demo.sh | grep <span class="string">"prefix"</span> -B 2</div><div class="line">file_name=some.jpg</div><div class="line"></div><div class="line">file_name_prefix=<span class="variable">$&#123;file_name%.*&#125;</span></div><div class="line">--</div><div class="line"></div><div class="line"><span class="built_in">echo</span> filename:<span class="variable">$&#123;file_name&#125;</span></div><div class="line"><span class="built_in">echo</span> filename prefix:<span class="variable">$&#123;file_name_prefix&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># 匹配行前后两行都输出</span></div><div class="line">$ cat demo.sh | grep <span class="string">"prefix"</span> -C 2</div><div class="line">file_name=some.jpg</div><div class="line"></div><div class="line">file_name_prefix=<span class="variable">$&#123;file_name%.*&#125;</span></div><div class="line">file_name_subfix=<span class="variable">$&#123;file_name#*.&#125;</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> filename:<span class="variable">$&#123;file_name&#125;</span></div><div class="line"><span class="built_in">echo</span> filename prefix:<span class="variable">$&#123;file_name_prefix&#125;</span></div><div class="line"><span class="built_in">echo</span> filename subfix:<span class="variable">$&#123;file_name_subfix&#125;</span></div></pre></td></tr></table></figure>
<h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ cat a.dat</div><div class="line">NO	NAME	SCORE</div><div class="line">1	jack	100</div><div class="line">2	tony	99</div><div class="line">3	spark	90</div><div class="line"></div><div class="line"><span class="comment"># cut默认以\t分隔，-f2,3 第二、三列</span></div><div class="line">$ cut <span class="_">-f</span>2,3 a.dat</div><div class="line">NAME	SCORE</div><div class="line">jack	100</div><div class="line">tony	99</div><div class="line">spark	90</div><div class="line"></div><div class="line"><span class="comment"># 打印前5个字符</span></div><div class="line">$ cut -c1-5 a.dat</div><div class="line">NO	NA</div><div class="line">1	jac</div><div class="line">2	ton</div><div class="line">3	spa</div></pre></td></tr></table></figure>
<h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">$ cat a.dat</div><div class="line">NO	NAME	SCORE</div><div class="line">1	jack	100</div><div class="line">2	tony	99</div><div class="line">3	spark	90</div><div class="line"></div><div class="line"><span class="comment"># 注意并未改变原始文件，g表示全局替换,如果没有此参数，则只替换匹配的第一处</span></div><div class="line">$ sed <span class="string">'s/90/91/g'</span> a.dat</div><div class="line">NO	NAME	SCORE</div><div class="line">1	jack	100</div><div class="line">2	tony	99</div><div class="line">3	spark	91</div><div class="line"></div><div class="line"><span class="comment"># 加上-i选项，同时改变原始文件</span></div><div class="line">$ sed -i <span class="string">'s/90/91/g'</span> a.dat</div><div class="line">$ cat a.dat</div><div class="line">NO	NAME	SCORE</div><div class="line">1	jack	100</div><div class="line">2	tony	99</div><div class="line">3	spark	91</div><div class="line"></div><div class="line"><span class="comment"># 3g 从第三次匹配开始替换</span></div><div class="line">$ sed -i <span class="string">'s/91/911/3g'</span> a.dat</div><div class="line">$ cat a.dat</div><div class="line">NO	NAME	SCORE</div><div class="line">1	jack	100</div><div class="line">2	tony	99</div><div class="line">3	spark	91</div><div class="line"></div><div class="line">$ cat a.dat</div><div class="line">NO	NAME	SCORE</div><div class="line">1	jack	100</div><div class="line">2	tony	99</div><div class="line">3	spark	91</div><div class="line"></div><div class="line">4	java	98</div><div class="line"></div><div class="line"><span class="comment"># 移除匹配的空白行</span></div><div class="line">$ sed  <span class="string">'/^$/d'</span> a.dat</div><div class="line">NO	NAME	SCORE</div><div class="line">1	jack	100</div><div class="line">2	tony	99</div><div class="line">3	spark	91</div><div class="line">4	java	98</div></pre></td></tr></table></figure>
<h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><ul>
<li>基本用法,awk “BEGIN{command} {command} END{command}” ,三个部分均可以省略</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"line1\nline2"</span> | awk <span class="string">'BEGIN&#123; print "start"&#125; &#123;print&#125; END&#123; print "END" &#125;'</span></div><div class="line">start</div><div class="line">line1</div><div class="line">line2</div><div class="line">END</div></pre></td></tr></table></figure>
<ul>
<li>awk中特殊变量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># NR:表示在执行过程中对应当前行号，NF:在执行过程中对应当前行的字段数，$0: 执行过程中当前行的内容，$1: 第一个字段的文本内容, $2: 第二个字段文本内容</span></div><div class="line">$ <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"line1 f2 f3\nline2 f4 f5\nline3 f6 f7"</span> | awk <span class="string">'&#123;print "line no:"NR",No of fields:"NF", $0="$0", $1="$1", $2="$2&#125;'</span></div><div class="line">line no:1,No of fields:3, <span class="variable">$0</span>=line1 f2 f3, <span class="variable">$1</span>=line1, <span class="variable">$2</span>=f2</div><div class="line">line no:2,No of fields:3, <span class="variable">$0</span>=line2 f4 f5, <span class="variable">$1</span>=line2, <span class="variable">$2</span>=f4</div><div class="line">line no:3,No of fields:3, <span class="variable">$0</span>=line3 f6 f7, <span class="variable">$1</span>=line3, <span class="variable">$2</span>=f6</div><div class="line"></div><div class="line"><span class="comment"># 统计文件行数</span></div><div class="line">$ awk <span class="string">'END&#123;print NR&#125;'</span> ./demo.sh</div><div class="line">10</div></pre></td></tr></table></figure>
<ul>
<li>使用awk进行行过滤</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 输出行号小于5的行</span></div><div class="line">$ awk <span class="string">'NR &lt; 5'</span> ./demo.sh</div><div class="line"></div><div class="line"><span class="comment"># 输出第一到第4行</span></div><div class="line">$ awk <span class="string">'NR==1,NR==4'</span> ./demo.sh</div><div class="line"></div><div class="line"><span class="comment"># 包含关键词"file_name"的行</span></div><div class="line">$ awk <span class="string">'/file_name/'</span> ./demo.sh</div><div class="line"></div><div class="line"><span class="comment"># 迭代文件每行</span></div><div class="line">$ cat demo.sh | (<span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$line</span> ; <span class="keyword">done</span>)</div></pre></td></tr></table></figure>
<p>遍历一行数据的每个单词</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">line=<span class="string">"hello shell"</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> world <span class="keyword">in</span> <span class="variable">$line</span></div><div class="line"><span class="keyword">do</span></div><div class="line">	<span class="built_in">echo</span> <span class="variable">$world</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>通过for循环遍历</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">line=<span class="string">"hello shell"</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>((i=0; i&lt;<span class="variable">$&#123;#line&#125;</span>; i++))</div><div class="line"><span class="keyword">do</span></div><div class="line">	<span class="built_in">echo</span> <span class="variable">$&#123;line:i:1&#125;</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<hr>
<p>参考:</p>
<ul>
<li><a href="http://c.biancheng.net/cpp/shell/" target="_blank" rel="external">Linux Shell脚本教程：30分钟玩转Shell脚本编程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h2&gt;&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h
    
    </summary>
    
      <category term="Linux" scheme="http://wiki.jassassin.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>object</title>
    <link href="http://wiki.jassassin.com/2015/08/05/scala/scala-object/"/>
    <id>http://wiki.jassassin.com/2015/08/05/scala/scala-object/</id>
    <published>2015-08-05T13:26:57.000Z</published>
    <updated>2016-08-11T05:45:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="简单类定义"><a href="#简单类定义" class="headerlink" title="简单类定义"></a>简单类定义</h3><p>Scala中类的定义比较简单:class不需要<code>public</code>修饰，同一个源文件中可同时定义多个<code>class</code>,并且这些类都是公开的。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> value = <span class="number">0</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">increment</span></span>() &#123;</div><div class="line">    value += <span class="number">1</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">current</span></span>() = value</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用:scala中对于不含参数的方法，则可以省略后面的括号。一般建议取值操作建议去掉空格!<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="type">Counter</span></div><div class="line">     obj1.increment</div><div class="line">     println(obj1.current)</div><div class="line"></div><div class="line"><span class="comment">//   var obj1 = new Counter()</span></div><div class="line"><span class="comment">//   obj1.increment()</span></div><div class="line"><span class="comment">//   println(obj1.current())</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">输出: <span class="number">1</span></div></pre></td></tr></table></figure></p>
<h3 id="getter-setter方法"><a href="#getter-setter方法" class="headerlink" title="getter_setter方法"></a>getter_setter方法</h3><p>scala对每个字段都提供getter和setter方法，将下面的代码保存为Person.scala:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> age = <span class="number">10</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成JVM字节码文件:<code>scalac Person.scala</code>.通过<code>javap -private Person.class</code>查看翻译后的java代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Compiled from <span class="string">"Person.scala"</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="comment">//属性字段</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">  <span class="comment">//由scala自动生成的getter/setter方法</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> age_$eq(<span class="keyword">int</span>);</div><div class="line"></div><div class="line">  <span class="comment">//构造方法</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过上面的java代码可以发现，翻译后的scala字段get/set方法并不是直接getXXX()/setXXX()！<br>scala中如果字段是私有的，则生成的getter/setter方法也是私有。因此，如果想自定义scala的get/set方法则可以将字段设置为<code>private</code>修饰的:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">	<span class="comment">//生成私有getter/setter</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">var</span> privateAge = <span class="number">10</span></div><div class="line"></div><div class="line">	<span class="comment">//val修饰的只生成getter</span></div><div class="line">	<span class="keyword">val</span> name = <span class="string">"eagle"</span></div><div class="line"></div><div class="line">	<span class="comment">//不生成getter/setter</span></div><div class="line">       <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">var</span> sex = <span class="string">"man"</span></div><div class="line"></div><div class="line">	<span class="comment">//自定义get/set</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">age</span> </span>= privateAge</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">setAge</span></span>(newVal: <span class="type">Int</span>)&#123;</div><div class="line">		privateAge = newVal</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成JVM字节码文件:<code>scalac Person.scala</code>.通过<code>javap -private Person.class</code>查看翻译后的java代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Compiled from <span class="string">"Person.scala"</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> privateAge;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> java.lang.String name;</div><div class="line">  <span class="comment">//未生成任何get/set方法</span></div><div class="line">  <span class="keyword">private</span> java.lang.String sex;</div><div class="line"></div><div class="line">  <span class="comment">//private</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">privateAge</span><span class="params">()</span></span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">void</span> privateAge_$eq(<span class="keyword">int</span>);</div><div class="line"></div><div class="line">  <span class="comment">//val</span></div><div class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//自定义方法get/set</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注: 关于scala中字段自动生成setter/getter方法规则</p>
<ul>
<li>如果字段是私有的(private)，则编译生成的class文件中的getter/setter方法也是私有的</li>
<li>如果字段是val的，则只生成getter方法</li>
<li>如果不想生成任何getter/setter方法，则可以使用private[this]修饰</li>
</ul>
<h3 id="Bean属性"><a href="#Bean属性" class="headerlink" title="Bean属性"></a>Bean属性</h3><p>由前面的介绍可知，虽然scala自动为属性字段生成了getter/setter方法，但是这些方法并不符合javabean规范。但是你可以通过scala提供的<code>@BeanProperty</code>来实现符合javabean规范的getter/setter方法:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scala.reflect.<span class="type">BeanProperty</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">	<span class="meta">@BeanProperty</span> <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"eagle"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>class文件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Compiled from <span class="string">"Person.scala"</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> java.lang.String name;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> name_$eq(java.lang.String);</div><div class="line"></div><div class="line">  <span class="comment">//@BeanProperty生成的符合规范的getter/setter方法</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(java.lang.String)</span></span>;</div><div class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="主构造器"><a href="#主构造器" class="headerlink" title="主构造器"></a>主构造器</h3><p>在scala中每个类都有主构造器，主构造器并不是以this方法定义，而是与类定义交织在一起:</p>
<ul>
<li>主构造器参数直接放在类名之后,主构造器参数会被编译成字段，其值被初始化成构造时传入的参数。</li>
<li>主构造器会执行类定义中的所有语句</li>
<li>通常在定义主构造器时同时指定默认参数</li>
<li>如果类名之后没有参数，则该类则具备一个无参主构造器。这样一个构造器会执行类体重的所有语句</li>
<li><p>构造参数也可以是不带val或var修饰，这样的参数如何处理则取决于它们在类中如何被使用.如果该参数至少被类中一个方法所使用，则该参数将被初始化不可变的私有为字段,效果类似<code>private[this] val</code>。否则，该参数将不被保存为字段!</p>
</li>
<li><p>主构造器可以由<code>private</code>关键字修饰，这样主构造器就变成私有了，而用户就只能调用该类的辅助构造器了</p>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">var name: <span class="type">String</span>,val age: <span class="type">Int</span></span>)</span>&#123;</div><div class="line">	println(<span class="string">"name:"</span> + name + <span class="string">",age:"</span> + age)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Person</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"jack"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">输出:name=jack,age=<span class="number">30</span> --&gt;</div></pre></td></tr></table></figure>
<p><code>javap -private Person.class</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">jassassin</span>.<span class="title">scala</span>.<span class="title">chaptor567</span>.<span class="title">Person</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span>&#123;</div><div class="line">    <span class="comment">//字段</span></div><div class="line">    <span class="keyword">private</span> java.lang.String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    <span class="comment">//设置默认值</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> $lessinit$greater$<span class="keyword">default</span>$<span class="number">2</span>();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> java.lang.String $lessinit$greater$<span class="keyword">default</span>$<span class="number">1</span>();</div><div class="line"></div><div class="line">    <span class="comment">//scala自动生成的name的getter/setter方法</span></div><div class="line">    <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> name_$eq(java.lang.String);</div><div class="line"></div><div class="line">    <span class="comment">//val类型的age字段只生成getter方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//主构造函数</span></div><div class="line">    <span class="keyword">public</span> com.jassassin.scala.chaptor567.Person(java.lang.String, <span class="keyword">int</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造参数不带<code>var</code>或<code>val</code>,被类中函数使用:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.jassassin.scala.chaptor567</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span> = "eagle",age: <span class="type">Int</span> = 30</span>) </span>&#123;</div><div class="line">  <span class="comment">//description函数使用到了主构造参数，则该参数被升格为私有字段。效果类似private[this] val</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">description</span> </span>= <span class="string">"name="</span> + name + <span class="string">",age="</span> + age</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//javap:</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">jassassin</span>.<span class="title">scala</span>.<span class="title">chaptor567</span>.<span class="title">Person</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span>&#123;</div><div class="line">    <span class="comment">//私有final</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> java.lang.String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> $lessinit$greater$<span class="keyword">default</span>$<span class="number">2</span>();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> java.lang.String $lessinit$greater$<span class="keyword">default</span>$<span class="number">1</span>();</div><div class="line"></div><div class="line">    <span class="comment">//函数</span></div><div class="line">    <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">description</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> com.jassassin.scala.chaptor567.Person(java.lang.String, <span class="keyword">int</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造参数不带<code>var</code>或<code>val</code>，未在类中使用:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>,age: <span class="type">Int</span></span>) </span>&#123;</div><div class="line"><span class="comment">//  def description = "name=" + name + ",age=" + age</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//javap:</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">jassassin</span>.<span class="title">scala</span>.<span class="title">chaptor567</span>.<span class="title">Person</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> com.jassassin.scala.chaptor567.Person(java.lang.String, <span class="keyword">int</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主构造器由<code>private</code>关键字修饰</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">private</span>(<span class="params">var name: <span class="type">String</span>,val age: <span class="type">Int</span></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//javap</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> java.lang.String name;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> age;</div><div class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> name_$eq(java.lang.String);</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//注意私有构造方法</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(java.lang.String, <span class="keyword">int</span>)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="辅助构造器"><a href="#辅助构造器" class="headerlink" title="辅助构造器"></a>辅助构造器</h3><p>和Java和C++一样,Scala也可以有任意多的构造器.不过Scala中只有前面所述的一个主构造器以及任意多个辅助构造器.这些辅助构造器有以下几个特点:</p>
<ul>
<li>Scala中的辅助构造器的名称都是this</li>
<li>每个辅助构造器都必须以一个对先前已定义的其他辅助构造器或主构造器的调用开始</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">var</span> name = <span class="string">"eagle"</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">var</span> age = <span class="number">20</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name: <span class="type">String</span>)&#123;</div><div class="line">		<span class="keyword">this</span>()</div><div class="line">		<span class="keyword">this</span>.name = name</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name: <span class="type">String</span>,age: <span class="type">Int</span>)&#123;</div><div class="line">		<span class="keyword">this</span>(name)</div><div class="line">		<span class="keyword">this</span>.age = age</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//javap</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> java.lang.String name;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">  <span class="keyword">private</span> java.lang.<span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">void</span> name_$eq(java.lang.String);</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">void</span> age_$eq(<span class="keyword">int</span>);</div><div class="line"></div><div class="line">  <span class="comment">//三个构造器</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(java.lang.String)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(java.lang.String, <span class="keyword">int</span>)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h3><p>Scala中可以定义类似java中的内部类,而且scala中的嵌套类有着自己的特点.先看下面的示例:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.jassassin.blog.scala.demo.chaptor5</div><div class="line"></div><div class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 嵌套类</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span>(<span class="params">var name: <span class="type">String</span></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 公司部门</div><div class="line">     */</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Department</span>(<span class="params">var name: <span class="type">String</span></span>)</span>&#123;</div><div class="line">      <span class="keyword">val</span> members = <span class="keyword">new</span> <span class="type">ArrayBuffer</span>[<span class="type">String</span>]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 公司所有部门</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">val</span> departments = <span class="keyword">new</span> <span class="type">ArrayBuffer</span>[<span class="type">Department</span>]</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 为该公司添加部门</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">join</span></span>(dep: <span class="type">Department</span>) = &#123;</div><div class="line">      departments += dep</div><div class="line">      dep</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Company</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">      <span class="keyword">val</span> networkbench = <span class="keyword">new</span> <span class="type">Company</span>(<span class="string">"networkbench"</span>)</div><div class="line">      <span class="keyword">val</span> embracesource = <span class="keyword">new</span> <span class="type">Company</span>(<span class="string">"embracesource"</span>)</div><div class="line"></div><div class="line">      <span class="keyword">val</span> dev1 = <span class="keyword">new</span> networkbench.<span class="type">Department</span>(<span class="string">"dev1"</span>)</div><div class="line">      <span class="keyword">val</span> dev12 = <span class="keyword">new</span> networkbench.<span class="type">Department</span>(<span class="string">"dev12"</span>)</div><div class="line"></div><div class="line">      <span class="keyword">val</span> ops = <span class="keyword">new</span> embracesource.<span class="type">Department</span>(<span class="string">"ops"</span>)</div><div class="line"></div><div class="line">      networkbench.join(dev1)</div><div class="line">      networkbench.join(dev12)</div><div class="line"></div><div class="line">       <span class="comment">//注意这里添加了一个属于embracesource的部门</span></div><div class="line">      networkbench.join(ops)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>scalac Company.scala</code>编译,错误提示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> Company.scala:<span class="number">45</span>: error: type mismatch;</div><div class="line"> found   : embracesource.Department</div><div class="line"> required: networkbench.Department</div><div class="line">      networkbench.join(ops)</div><div class="line">                        ^</div><div class="line">one error found</div></pre></td></tr></table></figure></p>
<p>上面错误提示networkbench不能添加embracesource的部门原因在于<code>scala中每个Company实例都有它自己的Department.</code>也就是说networkbench.Department和embracesource.Department是两个不同的数据类型!</p>
<h4 id="类型投影"><a href="#类型投影" class="headerlink" title="类型投影"></a>类型投影</h4><p>如果想产生类似java中的内部类特性,则可以将Department移至Company的外部.或者可以使用<code>类型投影 Company#Department</code>即”任何Company的Department”!<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span>(<span class="params">var name: <span class="type">String</span></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 公司部门</div><div class="line">     */</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Department</span>(<span class="params">var name: <span class="type">String</span></span>)</span>&#123;</div><div class="line">      <span class="keyword">val</span> members = <span class="keyword">new</span> <span class="type">ArrayBuffer</span>[<span class="type">String</span>]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 公司所有部门</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">val</span> departments = <span class="keyword">new</span> <span class="type">ArrayBuffer</span>[<span class="type">Company</span>#<span class="type">Department</span>]</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 为该公司添加部门</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">join</span></span>(dep: <span class="type">Company</span>#<span class="type">Department</span>) = &#123;</div><div class="line">      departments += dep</div><div class="line">      dep</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>当你需要某个类的单个实例，或者想为其他值或函数找一个可以挂靠的地方时，那么你可以考虑scala object语法。</p>
<h3 id="单例对象"><a href="#单例对象" class="headerlink" title="单例对象"></a>单例对象</h3><p>Scala没有静态方法或静态字段，但你可以用object语法来达到同样的目的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">object Object &#123;</div><div class="line">  <span class="function">def <span class="title">main</span><span class="params">(args: Array[String])</span>: Unit </span>= &#123;</div><div class="line">      <span class="comment">//连续调用5次</span></div><div class="line">      <span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">5</span>)&#123;</div><div class="line">          println(Accounts.newUniqueNumber())</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * object 类型</div><div class="line"> */</div><div class="line">object Accounts&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> var lastNumber = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 用于产生一个唯一number</div><div class="line">   */</div><div class="line">  <span class="function">def <span class="title">newUniqueNumber</span><span class="params">()</span> </span>= &#123;</div><div class="line">    lastNumber += <span class="number">1</span></div><div class="line">    lastNumber</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>示例中的<code>Accounts</code>,只会在该类第一次使用时被初始化一次也就是说如果该类从未被使用，则其构造器也不会被执行。对于任何你在Java或C++中会使用单例对象的地方，在Scala中都可以用对象来实现(但不能提供构造器参数):</p>
<ul>
<li>存放工具函数或常量</li>
<li>共享单个不可变实例</li>
<li>需要用单个实例来协调某个服务时</li>
</ul>
<h3 id="伴生对象"><a href="#伴生对象" class="headerlink" title="伴生对象"></a>伴生对象</h3><p>在Java或C++中，通常会用到既有实例方法又有静态方法的类。在Scala中，你可以通过类和与类同名的”伴生”对象来达到同样的目的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * object 类型</div><div class="line"> * Accounts类的伴生对象</div><div class="line"> */</div><div class="line">object Accounts&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> var lastNumber = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 用于产生一个唯一number</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">private</span> def <span class="title">newUniqueNumber</span><span class="params">()</span> </span>= &#123;</div><div class="line">    lastNumber += <span class="number">1</span></div><div class="line">    lastNumber</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Accounts</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//这里访问伴生对象的私有方法</span></div><div class="line">  val id = Accounts.newUniqueNumber()</div><div class="line"></div><div class="line">  <span class="keyword">private</span> var balance = <span class="number">0.0</span></div><div class="line"></div><div class="line">  <span class="function">def <span class="title">deposit</span><span class="params">(amount: Double)</span> </span>&#123;</div><div class="line">    balance += amount</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当类和它的伴生对象在同个文件中时，类可以访问伴生对象的私有特性(虽有可以访问但是并不包含在类的作用域中，因此需要添加Accounts前缀)。</p>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h2&gt;&lt;h3 id=&quot;简单类定义&quot;&gt;&lt;a href=&quot;#简单类定义&quot; class=&quot;headerlink&quot; title=&quot;简单类定义&quot;&gt;&lt;/a&gt;简单类定义&lt;/h
    
    </summary>
    
      <category term="Scala" scheme="http://wiki.jassassin.com/categories/Scala/"/>
    
    
  </entry>
  
  <entry>
    <title>intro</title>
    <link href="http://wiki.jassassin.com/2015/08/05/scala/scala/"/>
    <id>http://wiki.jassassin.com/2015/08/05/scala/scala/</id>
    <published>2015-08-05T13:17:16.000Z</published>
    <updated>2016-08-11T05:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Scala</strong>（发音为/ˈskɑːlə, ˈskeɪlə/）是一门多范式的编程语言，设计初衷是要集成面向对象编程和函数式编程的各种特性。其运行于<code>Java平台</code>（Java虚拟机），并兼容现有的Java程序。本文简单的介绍了scala的安装、命令行的使用、变量定义、操作符、函数定义、scala脚本等内容，通过本文可以对scala有个简单的认识！</p>
<h2 id="Scala解释器安装"><a href="#Scala解释器安装" class="headerlink" title="Scala解释器安装"></a>Scala解释器安装</h2><p><a href="http://www.scala-lang.org/download/" target="_blank" rel="external">Scala官网</a> | <a href="http://www.scala-lang.org/download/all.html" target="_blank" rel="external">All Versions Scala</a>.下载所需版本Scala安装包,解压到指定目录之后,配置环境变量<strong>Path</strong>.比如对于Linux系统，你可以通过修改<code>~/.profile</code>文件，添加如下内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> SCALA_HOME=</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$SCALA_HOME</span>/bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure></p>
<p>最后执行<code>source ~/.profile</code>使配置生效!Path变量的配置可以参考<code>JDK环境变量配置</code><a href="http://blog.chinaunix.net/uid-12115233-id-3304951.html" target="_blank" rel="external">Linux</a> | <a href="http://jingyan.baidu.com/article/3c343ff70bc6ea0d377963df.html" target="_blank" rel="external">Windows</a>.<br>完成之后在<code>terminal</code>中输入<code>scala</code>,如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">eagle<span class="meta">@jassassin</span> ~ $ scala</div><div class="line">Welcome to Scala version <span class="number">2.10</span>.4 (<span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server VM, Java 1.7.0_67).</span></div><div class="line">Type in expressions to have them evaluated.</div><div class="line">Type :help <span class="keyword">for</span> more information.</div><div class="line"></div><div class="line">scala&gt; 1+1</div><div class="line">res0: Int = <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>注:</p>
<ol>
<li>上面的内容会被快速的转换为java字节码，然后交给JVM进行执行!同时scala并不要求每条语句后面必须要跟<code>;</code>，除非一行代码中有多条语句!</li>
<li>对于scala解释器，你可以通过<code>Tab</code>键获取方法提示，或者通过方向键<code>↑</code>或<code>↓</code>获取历史输入</li>
</ol>
<h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><p>Scala中的变量主要有<code>var</code>和<code>val</code>两种.<code>val</code>类似java中的<code>final</code>变量,一旦被赋值便不可再改变!Scala中鼓励使用val类型变量!<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// val类型变量的值不可被修改</span></div><div class="line">scala&gt; val msg = <span class="string">"hello java!"</span></div><div class="line">msg: String = hello java!</div><div class="line"></div><div class="line">scala&gt; msg = <span class="string">"hello scala!"</span></div><div class="line">&lt;console&gt;:<span class="number">8</span>: error: reassignment to val</div><div class="line">       msg = <span class="string">"hello scala!"</span></div><div class="line">           ^</div></pre></td></tr></table></figure></p>
<p>注意上面的第2行代码<code>msg: String = hello java!</code>,这里scala进行了类型推断!<strong>为了避免混乱或者阅读方便,你可以在定义变量时同时指明变量类型</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注意scala中变量类型在":"之后</span></div><div class="line">scala&gt; var msg : java.lang.String = <span class="string">"hello world"</span></div><div class="line">msg: String = hello world</div><div class="line"><span class="comment">//简写</span></div><div class="line">scala&gt; var msg : String = <span class="string">"hello world"</span></div><div class="line">msg: String = hello world</div></pre></td></tr></table></figure></p>
<h2 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h2><p>与Java一样，Scala也有7种数值类型Byte、Char、Short、Int、Long、Float和Double，以及一个Boolean类型。Scala并不刻意区分基本类型与引用类型，你可以直接对数字执行方法。而scala编译器会自动对基本类型和引用类型进行转换，如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//直接对1调用toString方法.</div><div class="line">scala&gt; 1.toString</div><div class="line">res5: String = 1</div></pre></td></tr></table></figure></p>
<p>注:如果方法不带有参数且不会改变方法调用者，则调用方法时可以不带<code>()</code></p>
<h2 id="算术和操作符重载"><a href="#算术和操作符重载" class="headerlink" title="算术和操作符重载"></a>算术和操作符重载</h2><p>如下所示，scala中的算术操作符可以完成和java中一样的效果。但是，两者有本质的区别。scala中的<code>+</code>，相当于方法调用，或者说方法的名称就叫做<code>+</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; val sum = 10 + 10</div><div class="line">sum: Int = 20</div><div class="line">scala&gt; val sum2 = 10.+(10)</div><div class="line">warning: there were 1 deprecation warning(s); re-run with -deprecation <span class="keyword">for</span> details</div><div class="line">sum2: Double = 20.0</div><div class="line"></div><div class="line">scala&gt; println(sum2)</div><div class="line">20.0</div></pre></td></tr></table></figure></p>
<h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>scala中函数定义以<code>def</code>开头<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * max 	函数名称</div><div class="line"> * x: Int 	参数以及类型(不可省略类型)</div><div class="line"> *  : Int	函数返回值类型(有时可以省略)</div><div class="line"> */</div><div class="line"><span class="comment">//在命令行输入时,多行代码以'|'换行</span></div><div class="line">scala&gt; <span class="function">def <span class="title">max</span><span class="params">(x: Int, y: Int)</span>: Int </span>= &#123;</div><div class="line">     | <span class="keyword">if</span>(x &gt; y)</div><div class="line">     |   x</div><div class="line">     | y&#125;</div><div class="line">max: (x: Int, y: Int)Int</div><div class="line"></div><div class="line">scala&gt; max(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">res0: Int = <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>scala在定义函数时,参数部分的类型不能省略!但是当函数没有返回值时则可以省略<code>): Int</code>括号后面的<code>: Int</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function">def <span class="title">say</span><span class="params">(msg: String)</span></span>=&#123;</div><div class="line">     |   println(msg)</div><div class="line">     | &#125;</div><div class="line">say: (msg: String)Unit</div><div class="line"></div><div class="line">scala&gt; say(<span class="string">"HI"</span>)</div><div class="line">HI</div><div class="line"></div><div class="line"><span class="comment">//当函数只有一行代码时,则可以写成下面的形式</span></div><div class="line">scala&gt; <span class="function">def <span class="title">say</span><span class="params">(msg: String)</span></span>=println(msg)</div><div class="line">say: (msg: String)Unit</div><div class="line"></div><div class="line">scala&gt; say(<span class="string">"good"</span>)</div><div class="line">good</div></pre></td></tr></table></figure></p>
<p>注意上面的<code>say: (msg: String)Unit</code>中的Ｕnit.这里的<code>Unit</code>类似java中的<code>void</code>,表示函数没有返回值!</p>
<h2 id="Scala执行脚本"><a href="#Scala执行脚本" class="headerlink" title="Scala执行脚本"></a>Scala执行脚本</h2><p>scala脚本的命令行参数保存在<code>args</code>scala数组中,可以通过<code>args(i)</code>访问.其中i从0开始!<br>新建demo.scala文件,输入如下内容:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"Hello "</span> + args(<span class="number">0</span>) + <span class="string">"!"</span>)</div></pre></td></tr></table></figure></p>
<p>执行<code>scala demo.scala python</code></p>
<h2 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scala.io.Source</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> eagle</div><div class="line"> */</div><div class="line">object ReadFile &#123;</div><div class="line">  <span class="function">def <span class="title">main</span><span class="params">(args: Array[String])</span>: Unit </span>= &#123;</div><div class="line">    <span class="keyword">if</span>(args.length &gt; <span class="number">0</span>)&#123;</div><div class="line">      <span class="keyword">for</span>(line &lt;- Source.fromFile(args(<span class="number">0</span>)).getLines())&#123;</div><div class="line">        println(line)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">      Console.err.println(<span class="string">"please input the absolute file path:"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意上面第一行引入了:<code>scala.io.Source</code>这个类!<br>运行方式:<code>scala demo.scala **file path**</code></p>
<hr>
<p>参考<br>    <a href="http://baike.baidu.com/link?url=M9MYf8oT2pFJzP82EyKwMw3idTDimX7T2o8pKkAoFAy9s7ohVht1DYRx4icB8gggZGbRCw9H352tKRh4lG2q__" target="_blank" rel="external">Sala编程</a> Scala入门初探</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Scala&lt;/strong&gt;（发音为/ˈskɑːlə, ˈskeɪlə/）是一门多范式的编程语言，设计初衷是要集成面向对象编程和函数式编程的各种特性。其运行于&lt;code&gt;Java平台&lt;/code&gt;（Java虚拟机），并兼容现有的Java程序。本文简单的介绍了
    
    </summary>
    
      <category term="Scala" scheme="http://wiki.jassassin.com/categories/Scala/"/>
    
    
  </entry>
  
  <entry>
    <title>daily-use program</title>
    <link href="http://wiki.jassassin.com/2015/08/05/linux/linux/"/>
    <id>http://wiki.jassassin.com/2015/08/05/linux/linux/</id>
    <published>2015-08-05T10:42:15.000Z</published>
    <updated>2016-08-11T05:43:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用wget命令模拟post请求"><a href="#使用wget命令模拟post请求" class="headerlink" title="使用wget命令模拟post请求"></a>使用wget命令模拟post请求</h2><p>Linux中的<code>wget</code>是一个非常强大的命令，常用来下载文件。参考:<a href="http://www.cnblogs.com/analyzer/archive/2010/05/04/1727438.html" target="_blank" rel="external">wget 命令用法详解</a>.也可以用来模拟post请求:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">1. 简单页面的抓取  </div><div class="line">wget http://domain.com/path/simple_page.html  </div><div class="line">2. 添加自己的head  </div><div class="line">wget --header=<span class="string">"MyHeader: head_value"</span> http://domain.com/path/page/need_header.php  </div><div class="line">3. 伪装成浏览器  </div><div class="line">有些网站，例如facebook，会检测请求方式是否是浏览器，如果不是正常的浏览器，那么会redirect到一个<span class="string">"incompatible browser"</span>的错误页面。</div><div class="line">这时候需要wget伪装成一个浏览器（我是Mozilla Firefox！）：  </div><div class="line">wget --user-agent=<span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3 (.NET CLR 3.5.30729)"</span></div><div class="line">	http://domain.com/path/page/check_user_agent.php  </div><div class="line">4. post数据到某个页面  </div><div class="line">wget不光可以用get方式请求网页，还可以post data的，那样就可以实现自动注册、自动登录了（有验证码的页面除外。。。。）  </div><div class="line">wget --post-data=<span class="string">"user=user1&amp;pass=pass1&amp;submit=Login"</span> http://domain.com/login.php  </div><div class="line">5. 访问需要登录的页面  </div><div class="line">有些页面的访问需要登录，访问的时候需要传递cookie，这时候就需要和上面提到的post方式结合。一般过程是：post用户名和密码登录、保存cookie，</div><div class="line">然后访问页面时附带上cookie。  </div><div class="line">wget --post-data=<span class="string">"user=user1&amp;pass=pass1&amp;submit=Login"</span> --save-cookies=cookie.txt --keep-session-cookies http://domain.com/login.php  </div><div class="line">wget --load-cookies=cookie.txt http://domain.com/path/page_need_login.php</div></pre></td></tr></table></figure></p>
<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>在搭建hadoop或者storm等集群时，最好单独创建用户来操作:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">1.添加帐号</div><div class="line">useradd -m <span class="_">-s</span> /bin/bash -g groupname username</div><div class="line">-c comment 指定一段注释性描述。</div><div class="line"><span class="_">-d</span> 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</div><div class="line">-g 用户组 指定用户所属的用户组。</div><div class="line">-G 用户组，用户组 指定用户所属的附加组。</div><div class="line"><span class="_">-s</span> Shell文件 指定用户的登录Shell。(/bin/bash 使用bash（ 默认为 /bin/sh 使用默认不会在 $ 符前面出现loginname@ubuntu）)</div><div class="line">-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</div><div class="line">-m 创建home目录 （不加这个要手动添加目录，不然会出现No directory,Logging <span class="keyword">in</span> with HOME=/ ）</div><div class="line"></div><div class="line">接着修改新用户密码: passwd username</div><div class="line"></div><div class="line">2.删除帐号</div><div class="line">userdel -r username</div><div class="line">-r，它的作用是把用户的主目录一起删除。</div><div class="line"></div><div class="line">3.添加用户组</div><div class="line">groupadd groupname</div><div class="line">-g GID 指定新用户组的组标识号（GID）。</div><div class="line">-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</div><div class="line"></div><div class="line">4.使username用户可以执行sudo命令</div><div class="line">有时新用户执行sudo命令时会出现如下提示:</div><div class="line"><span class="string">"Sorry, user username is not allowed to execute '/usr/bin/vim /etc/sudoers' as root on jassassin."</span></div><div class="line"></div><div class="line">解决方式:</div><div class="line">su -  //切换至root用户</div><div class="line">vim /etc/sudoers //添加</div><div class="line">	root    ALL=(ALL:ALL) ALL</div><div class="line"></div><div class="line">	username   ALL=(ALL:ALL) ALL</div><div class="line"></div><div class="line">wq!  //保存</div><div class="line"></div><div class="line">5.对于jdk等环境变量，在~/.profile中修改</div></pre></td></tr></table></figure></p>
<h2 id="添加自起服务"><a href="#添加自起服务" class="headerlink" title="添加自起服务"></a>添加自起服务</h2><p>工作中实际项目经常是被部署到Linux服务器上进行运行的。在此情况下编写一个项目启动停止脚本会使项目管理起来更为方面。如果再进一步将其做成linux系统服务，那就更加方便了。因为这样就不用再去项目目录下去执行管理脚本。同时也可以将此服务做成开机启动项！</p>
<ol>
<li><p>编写管理脚本,如myserviced</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh  </span></div><div class="line"><span class="comment">#chkconfig: 2345 80 05   </span></div><div class="line"><span class="comment">#description: myservice   </span></div><div class="line"></div><div class="line"><span class="comment"># 接收输入参数start/stop/restart</span></div><div class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span>  </div><div class="line">start)  </div><div class="line">    <span class="built_in">echo</span> <span class="string">"myservice startup"</span> <span class="comment">#将该行替换成你自己的服务启动命令  </span></div><div class="line">    ;;  </div><div class="line">stop)  </div><div class="line">    <span class="built_in">echo</span> <span class="string">"myservice stop"</span> <span class="comment">#将该行替换成你自己服务的启动命令  </span></div><div class="line">    ;;  </div><div class="line">restart)  </div><div class="line">    <span class="built_in">echo</span> <span class="string">"myservice stop"</span> <span class="comment">#...  </span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"myservice startup"</span> <span class="comment">#...  </span></div><div class="line">    ;;  </div><div class="line">*)  </div><div class="line">    ;;  </div><div class="line"><span class="keyword">esac</span>  </div><div class="line"></div><div class="line"><span class="comment"># chkconfig 2345表示服务的运行级别，80代表Start的顺序，05代表Kill（Stop）的顺序；</span></div></pre></td></tr></table></figure>
</li>
<li><p>将编写的脚本放到/etc/init.d/，将myserviced的访问权限加上“可执行”权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chmod +x /etc/init.d/myserviced</div></pre></td></tr></table></figure>
</li>
<li><p>添加服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ chkconfig --add myserviced  </div><div class="line"><span class="comment"># 查看是否添加成功</span></div><div class="line">$ chkconfig --list | grep myserviced</div></pre></td></tr></table></figure>
</li>
<li><p>如果需要开机启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 单独开启myserviced服务的命令</span></div><div class="line">$ chkconfig myserviced on</div><div class="line"><span class="comment"># 单独关闭myserviced服务的命令</span></div><div class="line">$ chkconfig myserviced off</div><div class="line"><span class="comment"># 查看服务状态</span></div><div class="line">$ /etc/init.d/myserviced status</div></pre></td></tr></table></figure>
</li>
</ol>
<p>以上步骤完成之后，重启!</p>
<h2 id="查看端口被哪个进程占用"><a href="#查看端口被哪个进程占用" class="headerlink" title="查看端口被哪个进程占用"></a>查看端口被哪个进程占用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ netstat -ntlp|grep 4000 <span class="comment">#查询的端口</span></div><div class="line"><span class="comment"># 输出</span></div><div class="line">tcp        0      0 0.0.0.0:4000            0.0.0.0:*               LISTEN      6689/hexo  <span class="comment"># 6689即占用4000端口的进程号</span></div><div class="line">$ ps -ef|grep 6689 <span class="comment"># 查看该进程的信息</span></div><div class="line"><span class="comment"># 输出 14:00该进程启动时间</span></div><div class="line">eagle     6689  6675  0 14:00 pts/7    00:00:06 hexo <span class="comment"># 这个就是进程信息了</span></div></pre></td></tr></table></figure>
<p>将以上的过程进行合并<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ netstat -ntlp|grep 4000|awk <span class="string">'&#123;print $7&#125;'</span></div></pre></td></tr></table></figure></p>
<h2 id="find-指定文件"><a href="#find-指定文件" class="headerlink" title="find 指定文件"></a>find 指定文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># . 当前目录   -maxdepth 默认只查询当前目录,不查询子目录,通过该参数可以设置查询的子目录最大深度  </span></div><div class="line">find . -maxdepth 10 -name <span class="string">"124-*"</span></div></pre></td></tr></table></figure>
<h2 id="find-文件内容"><a href="#find-文件内容" class="headerlink" title="find 文件内容"></a>find 文件内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># . 当前目录   -maxdepth 默认只查询当前目录,不查询子目录,通过该参数可以设置查询的子目录最大深度  dsymbolized 查询关键字</span></div><div class="line">find . -maxdepth 10 -type f -name <span class="string">"*.log"</span> | xargs grep <span class="string">"dsymbolized"</span></div></pre></td></tr></table></figure>
<h2 id="查询文件或文件夹的磁盘使用空间"><a href="#查询文件或文件夹的磁盘使用空间" class="headerlink" title="查询文件或文件夹的磁盘使用空间"></a>查询文件或文件夹的磁盘使用空间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@centos6 /]<span class="comment"># du -h --max-depth=10 /opt/*</span></div><div class="line">76K	/opt/kafka_2.10-0.8.2.0/bin/windows</div><div class="line">156K	/opt/kafka_2.10-0.8.2.0/bin</div><div class="line">18M	/opt/kafka_2.10-0.8.2.0/libs</div><div class="line">44K	/opt/kafka_2.10-0.8.2.0/config</div><div class="line">8.8G	/opt/kafka_2.10-0.8.2.0/logs</div><div class="line">8.9G	/opt/kafka_2.10-0.8.2.0</div><div class="line">16M	/opt/kafka_2.10-0.8.2.0.tgz</div><div class="line">4.0K	/opt/rh</div><div class="line">8.0K	/opt/server-cluster.properties</div><div class="line">4.0K	/opt/zk/data</div><div class="line">8.0K	/opt/zk</div><div class="line">16K	/opt/zookeeper/data/version-2</div><div class="line">28K	/opt/zookeeper/data</div><div class="line">28K	/opt/zookeeper/logs/version-2</div><div class="line">32K	/opt/zookeeper/logs</div><div class="line">64K	/opt/zookeeper</div></pre></td></tr></table></figure>
<h2 id="统计当前目录大小并按大小排序"><a href="#统计当前目录大小并按大小排序" class="headerlink" title="统计当前目录大小并按大小排序"></a>统计当前目录大小并按大小排序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@centos6 /]<span class="comment"># du -sm * | sort -n</span></div><div class="line">0	selinux</div><div class="line">0	sys</div><div class="line">1	dev</div><div class="line">1	home</div><div class="line">1	kafka_metrics</div><div class="line">1	logs</div><div class="line">1	lost+found</div><div class="line">1	media</div><div class="line">1	mnt</div><div class="line">1	srv</div><div class="line">2	sbt</div><div class="line">2	sbt-0.13.9.tgz</div><div class="line">8	bin</div><div class="line">15	sbin</div><div class="line">17	kafka_2.9.1-0.8.2.1.tgz</div><div class="line">19	kafka</div><div class="line">22	lib64</div><div class="line">27	etc</div><div class="line">28	boot</div><div class="line">42	zookeeper</div><div class="line">82	root</div><div class="line">106	var</div><div class="line">148	lib</div><div class="line">1613	usr</div><div class="line">2411	tmp</div><div class="line">9040	opt</div></pre></td></tr></table></figure>
<h2 id="统计多个文件占用的磁盘情况"><a href="#统计多个文件占用的磁盘情况" class="headerlink" title="统计多个文件占用的磁盘情况"></a>统计多个文件占用的磁盘情况</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ du -ch LICENSE pom.xml</div><div class="line">28K	LICENSE</div><div class="line">44K	pom.xml</div><div class="line">72K	total</div></pre></td></tr></table></figure>
<h2 id="找出指定目录中最大的10个文件"><a href="#找出指定目录中最大的10个文件" class="headerlink" title="找出指定目录中最大的10个文件"></a>找出指定目录中最大的10个文件</h2><ul>
<li>统计当前目录下所有文件和目录，输出最大的十个文件或目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># du -a:指定所有目录和文件 -k:KB</span></div><div class="line"><span class="comment"># sort -n:按数字排 -r:倒序 -k:按第n列排序</span></div><div class="line">$ du -ak ./* | sort -nrk 1 | head</div><div class="line">10128	./flume-ng-sinks</div><div class="line">6488	./flume-ng-sinks/flume-ng-morphline-solr-sink</div><div class="line">5056	./flume-ng-core</div><div class="line">4284	./flume-ng-channels</div><div class="line">3236	./flume-ng-sinks/flume-ng-morphline-solr-sink/target</div><div class="line">3212	./flume-ng-sinks/flume-ng-morphline-solr-sink/src</div><div class="line">3132	./flume-ng-sinks/flume-ng-morphline-solr-sink/target/<span class="built_in">test</span>-classes</div><div class="line">3124	./flume-ng-sinks/flume-ng-morphline-solr-sink/src/<span class="built_in">test</span></div><div class="line">3088	./flume-ng-core/target</div><div class="line">3032	./flume-ng-sinks/flume-ng-morphline-solr-sink/src/<span class="built_in">test</span>/resources</div></pre></td></tr></table></figure>
<ul>
<li>统计当前目录下所有文件，输出最大的十个文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ find . -type f  -exec du -h &#123;&#125; \; |sort -nrk 1 | head</div><div class="line">848K	./.git/objects/pack/pack-ccf6f43619f071abfc08a7c2068afda5b692506e.idx</div><div class="line">352K	./flume-ng-core/target/flume-ng-core-1.6.0.jar</div><div class="line">292K	./flume-ng-channels/flume-file-channel/target/flume-file-channel-1.6.0.jar</div><div class="line">272K	./flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/proto/ProtosFactory.java</div><div class="line">244K	./flume-ng-sinks/flume-ng-morphline-solr-sink/target/<span class="built_in">test</span>-classes/<span class="built_in">test</span>-documents/sample-statuses-20120906-141433-medium.avro</div><div class="line">244K	./flume-ng-sinks/flume-ng-morphline-solr-sink/src/<span class="built_in">test</span>/resources/<span class="built_in">test</span>-documents/sample-statuses-20120906-141433-medium.avro</div><div class="line">220K	./flume-ng-sinks/flume-ng-morphline-solr-sink/target/<span class="built_in">test</span>-classes/<span class="built_in">test</span>-documents/<span class="built_in">test</span>Keynote.key</div><div class="line">220K	./flume-ng-sinks/flume-ng-morphline-solr-sink/src/<span class="built_in">test</span>/resources/<span class="built_in">test</span>-documents/<span class="built_in">test</span>Keynote.key</div><div class="line">216K	./flume-ng-doc/sphinx/FlumeUserGuide.rst</div><div class="line">164K	./flume-ng-sinks/flume-ng-morphline-solr-sink/target/<span class="built_in">test</span>-classes/<span class="built_in">test</span>-documents/<span class="built_in">test</span>PPT_various.ppt</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用wget命令模拟post请求&quot;&gt;&lt;a href=&quot;#使用wget命令模拟post请求&quot; class=&quot;headerlink&quot; title=&quot;使用wget命令模拟post请求&quot;&gt;&lt;/a&gt;使用wget命令模拟post请求&lt;/h2&gt;&lt;p&gt;Linux中的&lt;code&gt;w
    
    </summary>
    
      <category term="Linux" scheme="http://wiki.jassassin.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>arry&amp;collection</title>
    <link href="http://wiki.jassassin.com/2015/04/25/scala/scala-collection/"/>
    <id>http://wiki.jassassin.com/2015/04/25/scala/scala-collection/</id>
    <published>2015-04-25T13:24:42.000Z</published>
    <updated>2016-08-11T05:43:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录Scala中的数组(定长数组与可变长数组)定义以及常用操作,同时将映射(类似java中的集合类)以及元组也放在了这里!</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定长数组"><a href="#定长数组" class="headerlink" title="定长数组"></a>定长数组</h3><p>在JVM中，Scala的Array以Java数组的方式实现。Int、Double或其他与Java中基本类型对应的数组都是基本类型数组。比如Array(“a”,”b”,”c”)在JVM中就是一个String[]。下面是使用Scala中得Array实现的长度不变的数组:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 长度为5的Int类型的定长数组，初始值都是0</span></div><div class="line">scala&gt; val nums = new Array[Int](5)</div><div class="line">nums: Array[Int] = Array(0, 0, 0, 0, 0)</div><div class="line"></div><div class="line"><span class="comment"># 长度为5的String类型的定长数组，初始值都是null</span></div><div class="line">scala&gt; val a = new Array[String](5)</div><div class="line">a: Array[String] = Array(null, null, null, null, null)</div><div class="line"></div><div class="line"><span class="comment"># 长度为2的String类型的定长数组，直接初始化</span></div><div class="line">scala&gt; val s = Array(<span class="string">"jassassin"</span>,<span class="string">"eagle"</span>)</div><div class="line">s: Array[String] = Array(jassassin, eagle)</div><div class="line"></div><div class="line"><span class="comment"># 数组长度不可改变</span></div><div class="line">scala&gt; s(2) = <span class="string">"bye"</span></div><div class="line">java.lang.ArrayIndexOutOfBoundsException: 2</div><div class="line">  ... 33 elided</div><div class="line"></div><div class="line"><span class="comment"># 注意数组中的值的访问形式是通过"()"，而不是"[]"</span></div><div class="line">scala&gt; s(1) = <span class="string">"bye"</span></div></pre></td></tr></table></figure>
<p>注: <em> 数组元素的访问方式是<code>s(1)</code>而不是<code>s[1]</code></em></p>
<h3 id="可变长数组ArrayBuffer"><a href="#可变长数组ArrayBuffer" class="headerlink" title="可变长数组ArrayBuffer"></a>可变长数组ArrayBuffer</h3><p>Scala中使用ArrayBuffer,实现类似java中得ArrayList可变长数组。下面的示例是我在terminal中测试的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 引入ArrayBuffer类</span></div><div class="line">scala&gt; import scala.collection.mutable.ArrayBuffer</div><div class="line">import scala.collection.mutable.ArrayBuffer</div><div class="line"></div><div class="line"><span class="comment"># 定义Int类型的ArrayBuffer</span></div><div class="line">scala&gt; val arr = ArrayBuffer[Int]()</div><div class="line">arr: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer()</div><div class="line"></div><div class="line"><span class="comment"># 使用"+="在尾端添加元素</span></div><div class="line">scala&gt; arr += 1</div><div class="line">res5: arr.type = ArrayBuffer(1)</div><div class="line"></div><div class="line"><span class="comment"># 使用"+="在尾端添加元素，多个元素用"()"括起来</span></div><div class="line">scala&gt; arr += (1,2,3,4,5)</div><div class="line">res7: arr.type = ArrayBuffer(1, 1, 2, 3, 4, 5)</div><div class="line"></div><div class="line"><span class="comment"># 使用"++="追加集合</span></div><div class="line">scala&gt; arr ++= Array(1,2,3,4,5)</div><div class="line">res8: arr.type = ArrayBuffer(1, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)</div><div class="line"></div><div class="line"><span class="comment"># 去除最后5个元素</span></div><div class="line">scala&gt; arr.trimEnd(5)</div><div class="line"></div><div class="line">scala&gt; println(arr)</div><div class="line">ArrayBuffer(1, 1, 2, 3, 4, 5)</div><div class="line"></div><div class="line"><span class="comment"># 去除第一个元素</span></div><div class="line">scala&gt; arr.trimStart(1)</div><div class="line"></div><div class="line">scala&gt; println(arr)</div><div class="line">ArrayBuffer(1, 2, 3, 4, 5)</div></pre></td></tr></table></figure>
<p>你也可以像下面这样将上面的代码写入Demo.scala文件中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scala.collection.mutable.ArrayBuffer</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  <span class="doctag">@autor</span> jassassin</div><div class="line">  <span class="doctag">@description</span> Scala数组</div><div class="line">*/</div><div class="line">object Demo&#123;</div><div class="line"></div><div class="line">	<span class="function">def <span class="title">main</span><span class="params">(args: Array[String])</span>: Unit </span>= &#123;</div><div class="line"></div><div class="line">		<span class="comment">//定义可变长的Int数组ArrayBuffer</span></div><div class="line">		val arr = ArrayBuffer[Int]()</div><div class="line"></div><div class="line">		arr += <span class="number">1</span></div><div class="line">		arr += (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">		arr ++= Array(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line"></div><div class="line">		printArr(arr)</div><div class="line"></div><div class="line">		println(<span class="string">"\n-------trimEnd(3)------------"</span>)</div><div class="line">		arr.trimEnd(<span class="number">3</span>)</div><div class="line">		printArr(arr)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 打印ArrayBuffer</div><div class="line">	*/</div><div class="line">	<span class="function">def <span class="title">printArr</span><span class="params">(arr: ArrayBuffer[Int])</span></span>&#123;</div><div class="line">		print(<span class="string">"arr:"</span>)</div><div class="line">		<span class="keyword">for</span>(i &lt;- arr)&#123;</div><div class="line">			print(i + <span class="string">" "</span>)</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//换行</span></div><div class="line">		println()</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">RUN: scala Demo.scala</div><div class="line">----------------------------输出--------------------------------</div><div class="line">arr:<span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></div><div class="line"></div><div class="line">-------trimEnd(<span class="number">3</span>)------------</div><div class="line">arr:<span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">2</span></div></pre></td></tr></table></figure>
<p>对于ArrayBuffer，如果在数组中间插入元素由于需要将插入位置之后的所有后移，因此效率相对较低!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在数组角标1处插入元素0</span></div><div class="line">scala&gt; arr.insert(1,0)</div><div class="line"></div><div class="line">scala&gt; println(arr)</div><div class="line">ArrayBuffer(1, 0, 2, 3, 4, 5)</div><div class="line"></div><div class="line"><span class="comment"># 在数组角标6处插入多个元素“6,7,8”</span></div><div class="line">scala&gt; arr.insert(6,6,7,8)</div><div class="line"></div><div class="line">scala&gt; println(arr)</div><div class="line">ArrayBuffer(1, 0, 2, 3, 4, 5, 6, 7, 8)      </div><div class="line"></div><div class="line"><span class="comment"># 移除数组角标1的元素</span></div><div class="line">scala&gt; arr.remove(1)</div><div class="line">res19: Int = 0</div><div class="line"></div><div class="line">scala&gt; println(arr)</div><div class="line">ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8)</div><div class="line"></div><div class="line"><span class="comment"># 移除数组角标5之后的三个元素</span></div><div class="line">scala&gt; arr.remove(5,3)</div><div class="line"></div><div class="line">scala&gt; println(arr)</div><div class="line">ArrayBuffer(1, 2, 3, 4, 5)</div></pre></td></tr></table></figure>
<p>注: <em>上面的所有操作除<code>trimStart/trimEnd</code>操作位置索引是从1开始外，其他操作都是从0开始</em></p>
<h3 id="定长数组与可变数组的相互转换"><a href="#定长数组与可变数组的相互转换" class="headerlink" title="定长数组与可变数组的相互转换"></a>定长数组与可变数组的相互转换</h3><p>有时想使用定长数组，但又不知道其长度。此时先定义一个可变长数组，然后在适当的时候将其转换成定长数组,反之也可以:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将前面的ArrayBuffer转为Array</span></div><div class="line">scala&gt; arr.toArray</div><div class="line">res25: Array[Int] = Array(1, 2, 3, 4, 5)</div><div class="line"></div><div class="line">scala&gt; val z = Array(<span class="string">"jassassin"</span>,<span class="string">"eagle"</span>)</div><div class="line">z: Array[String] = Array(jassassin, eagle)</div><div class="line"></div><div class="line"><span class="comment"># 将前后的Array转为ArrayBuffer</span></div><div class="line">scala&gt; z.toBuffer</div><div class="line">res24: scala.collection.mutable.Buffer[String] = ArrayBuffer(jassassin, eagle)</div></pre></td></tr></table></figure>
<h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><p>你可以通过<code>Int.until(n)</code>方法遍历角标<code>0-&gt;n-1</code>的方式来实现数组的遍历:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># i取值从0到arr.length-1</span></div><div class="line">scala&gt; <span class="keyword">for</span>(i &lt;- 0 until arr.length)&#123;<span class="built_in">print</span>(arr(i) + <span class="string">" "</span>)&#125;</div><div class="line">1 2 3 4 5</div><div class="line"><span class="comment"># 通过(0 until arr.length).reverse实现倒序遍历</span></div><div class="line">scala&gt; <span class="keyword">for</span>(i &lt;- (0 until arr.length).reverse)&#123;<span class="built_in">print</span>(arr(i) + <span class="string">" "</span>)&#125;</div><div class="line">5 4 3 2 1</div></pre></td></tr></table></figure>
<p>也可以通过类似java中得增强for循环直接遍历数组中得元素:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">for</span>(i &lt;- arr)&#123;<span class="built_in">print</span>(i + <span class="string">" "</span>)&#125;</div><div class="line">1 2 3 4 5</div></pre></td></tr></table></figure></p>
<h3 id="数组转换"><a href="#数组转换" class="headerlink" title="数组转换"></a>数组转换</h3><p>结合for推导，可以基于已有的数组方便的创建一个新的数组:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; val y = Array(1,2,3,4,5)</div><div class="line">y: Array[Int] = Array(1, 2, 3, 4, 5)</div><div class="line"></div><div class="line">scala&gt; val yy = <span class="keyword">for</span>(element &lt;- y <span class="keyword">if</span> element % 2 == 0)yield 2 * element</div><div class="line">yy: Array[Int] = Array(4, 8)</div></pre></td></tr></table></figure>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>数组提供了很多常用的方法来对其中的元素进行求和以及排序等:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">scala&gt; y.sum</div><div class="line">res33: Int = 15</div><div class="line"></div><div class="line">scala&gt; y.max</div><div class="line">res34: Int = 5</div><div class="line"></div><div class="line">scala&gt; y.min</div><div class="line">res35: Int = 1</div><div class="line"></div><div class="line"><span class="comment"># 通过scala.util.Sorting对数组o排序</span></div><div class="line">scala&gt; val o = Array(1,7,3,2,9)</div><div class="line">o: Array[Int] = Array(1, 7, 3, 2, 9)</div><div class="line"></div><div class="line">scala&gt; scala.util.Sorting.quickSort(o)</div><div class="line"></div><div class="line">scala&gt; <span class="keyword">for</span>(i &lt;- o)&#123;<span class="built_in">print</span>(i + <span class="string">" "</span>)&#125;</div><div class="line">1 2 3 7 9</div><div class="line"></div><div class="line"><span class="comment"># 以指定分隔符构建字符串的形式输出数组结果</span></div><div class="line">scala&gt; y.mkString(<span class="string">" and "</span>)</div><div class="line">res46: String = 1 and 2 and 3 and 4 and 5</div><div class="line"></div><div class="line"><span class="comment"># 更进一步指定输出的前后缀</span></div><div class="line">scala&gt; y.mkString(<span class="string">"&lt;"</span>,<span class="string">","</span>,<span class="string">"&gt; "</span>)</div><div class="line">res47: String = <span class="string">"&lt;1,2,3,4,5&gt; "</span></div></pre></td></tr></table></figure>
<p>注: 对于上面的<code>min</code>,<code>max</code>,<code>quickSort</code>方法，数组的元素类型必须支持比较操作!</p>
<h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>所谓映射即键值对集合！</p>
<h3 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h3><p>你可以通过如下几种方式，创建一个映射:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 默认创建不可变Map</span></div><div class="line">scala&gt; val scores = Map(<span class="string">"jack"</span> -&gt; 99,<span class="string">"tony"</span> -&gt; 89,<span class="string">"rose"</span> -&gt; 88)</div><div class="line">scores: scala.collection.immutable.Map[String,Int] = Map(jack -&gt; 99, tony -&gt; 89, rose -&gt; 88)</div><div class="line"></div><div class="line"><span class="comment"># 这里尝试更新不可变Map scores中的值</span></div><div class="line">scala&gt; scores(<span class="string">"jack"</span>) = 100</div><div class="line">&lt;console&gt;:9: error: value update is not a member of scala.collection.immutable.Map[String,Int]</div><div class="line">              scores(<span class="string">"jack"</span>) = 100</div><div class="line">              ^</div><div class="line"></div><div class="line"><span class="comment"># 显示创建可变Map</span></div><div class="line">scala&gt; val scores2 = scala.collection.mutable.Map(<span class="string">"jack"</span> -&gt; 99,<span class="string">"tony"</span> -&gt; 89,<span class="string">"rose"</span> -&gt; 88)</div><div class="line">scores2: scala.collection.mutable.Map[String,Int] = Map(jack -&gt; 99, rose -&gt; 88, tony -&gt; 89)</div><div class="line"></div><div class="line"><span class="comment"># 创建一个空的可变Map</span></div><div class="line">scala&gt; val scores3 = new scala.collection.mutable.HashMap[String,Int]</div><div class="line">scores3: scala.collection.mutable.HashMap[String,Int] = Map()</div><div class="line"></div><div class="line"><span class="comment"># 初始化不可变Map的另外一种形式，不推荐!</span></div><div class="line">scala&gt; val scores4 = Map((<span class="string">"jack"</span>,99),(<span class="string">"tony"</span>,89),(<span class="string">"rose"</span>,88))</div><div class="line">scores4: scala.collection.immutable.Map[String,Int] = Map(jack -&gt; 99, tony -&gt; 89, rose -&gt; 88)</div></pre></td></tr></table></figure>
<h3 id="获取映射中的值"><a href="#获取映射中的值" class="headerlink" title="获取映射中的值"></a>获取映射中的值</h3><p>你可以通过如下方式访问集合中某个键对应的值:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; val jackScore = scores(<span class="string">"jack"</span>)</div><div class="line">jackScore: Int = 99</div></pre></td></tr></table></figure>
<p>前面这种方式当映射中不包含查询的键时，将会抛出异常:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scala&gt; val noScore = scores(<span class="string">"eagle"</span>)</div><div class="line">java.util.NoSuchElementException: key not found: eagle</div><div class="line">	at scala.collection.MapLike<span class="variable">$class</span>.default(MapLike.scala:228)</div></pre></td></tr></table></figure>
<p>为避免上面的问题，可以先进行判断:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先判断</span></div><div class="line">scala&gt; val noScore = <span class="keyword">if</span>(scores.contains(<span class="string">"eagle"</span>)) scores(<span class="string">"eagle"</span>) <span class="keyword">else</span> 0</div><div class="line">noScore: Int = 0</div></pre></td></tr></table></figure></p>
<p>简化方式,使用<code>getOrElse</code>方法:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; val noScore2 = scores.getOrElse(<span class="string">"eagle"</span>,0)</div><div class="line">noScore2: Int = 0</div></pre></td></tr></table></figure></p>
<h3 id="更新映射中的值"><a href="#更新映射中的值" class="headerlink" title="更新映射中的值"></a>更新映射中的值</h3><p>可以通过下面的方式更新或添加某个<code>可变映射</code>的值。示例:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义可变Map</span></div><div class="line">scala&gt; val name_age =new scala.collection.mutable.HashMap[String,Int]</div><div class="line">name_age: scala.collection.mutable.HashMap[String,Int] = Map()</div><div class="line"></div><div class="line"><span class="comment"># 添加键值对</span></div><div class="line">scala&gt; name_age += (<span class="string">"jack"</span> -&gt; 20,<span class="string">"tony"</span> -&gt; 30)</div><div class="line">res1: name_age.type = Map(jack -&gt; 20, tony -&gt; 30)</div><div class="line"></div><div class="line"><span class="comment"># 更新某个键值</span></div><div class="line">scala&gt; name_age(<span class="string">"jack"</span>) = 25</div><div class="line"></div><div class="line">scala&gt; <span class="built_in">print</span>(name_age)</div><div class="line">Map(jack -&gt; 25, tony -&gt; 30)</div><div class="line"></div><div class="line"><span class="comment"># 删除某个键</span></div><div class="line">scala&gt; name_age -= <span class="string">"tony"</span></div><div class="line">res5: name_age.type = Map(jack -&gt; 25)</div></pre></td></tr></table></figure>
<p>虽然不可变映射不能改变其值，但是可以基于该不可变映射创建一个新的映射:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 这是前面定义的不可变scores</span></div><div class="line">scala&gt; <span class="built_in">print</span>(scores)</div><div class="line">Map(jack -&gt; 99, tony -&gt; 89, rose -&gt; 88)</div><div class="line"></div><div class="line"><span class="comment"># 基于scores创建一个新的Map，同时更新了"jack"的值，并追加了键值对("eagle" -&gt; 99)</span></div><div class="line">scala&gt; val newScores = scores + (<span class="string">"jack"</span> -&gt; 100,<span class="string">"eagle"</span> -&gt; 99)</div><div class="line">newScores: scala.collection.immutable.Map[String,Int]</div><div class="line">			= Map(jack -&gt; 100, tony -&gt; 89, rose -&gt; 88, eagle -&gt; 99)</div><div class="line"></div><div class="line"><span class="comment"># 通过"-"，删除不可变映射中的某个元素创建一个新的映射</span></div><div class="line">scala&gt; val newScores2 = newScores - <span class="string">"eagle"</span></div><div class="line">newScores2: scala.collection.immutable.Map[String,Int] = Map(jack -&gt; 100, tony -&gt; 89, rose -&gt; 88)</div></pre></td></tr></table></figure></p>
<h3 id="迭代映射"><a href="#迭代映射" class="headerlink" title="迭代映射"></a>迭代映射</h3><p>遍历所有kv:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">for</span>((k,v) &lt;- scores)&#123;println(k + <span class="string">"-&gt;"</span> + v)&#125;</div><div class="line">jack-&gt;99</div><div class="line">tony-&gt;89</div><div class="line">rose-&gt;88</div></pre></td></tr></table></figure></p>
<p>遍历所有key:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 取出映射的keySet集合</span></div><div class="line">scala&gt; <span class="keyword">for</span>(key &lt;- scores.keySet)&#123;println(key)&#125;</div><div class="line">jack</div><div class="line">tony</div><div class="line">rose</div></pre></td></tr></table></figure></p>
<p>遍历所有value:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">for</span>(value &lt;- scores.values) println(value)</div><div class="line">99</div><div class="line">89</div><div class="line">88</div></pre></td></tr></table></figure>
<p>反转映射的k-&gt;v:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; val invertScores = <span class="keyword">for</span>((k,v) &lt;- scores) yield (v,k)</div><div class="line">invertScores: scala.collection.immutable.Map[Int,String] = Map(99 -&gt; jack, 89 -&gt; tony, 88 -&gt; rose)</div><div class="line"></div><div class="line">scala&gt; println(invertScores)</div><div class="line">Map(99 -&gt; jack, 89 -&gt; tony, 88 -&gt; rose)</div></pre></td></tr></table></figure>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组可以用来包含不同元素类型的数据，因此其可以用于函数需要返回不止一个值的情况!元组的定义比较简单，访问元组指定位置的元素可以通过<code>tuple._index</code>来访问!示例:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义一个元组t</span></div><div class="line">scala&gt; val t = (1,3.14,<span class="string">"hello"</span>)</div><div class="line">t: (Int, Double, String) = (1,3.14,hello)</div><div class="line"></div><div class="line"><span class="comment"># 访问元组中的位置1上的元素</span></div><div class="line">scala&gt; println(t._1)</div><div class="line">1</div></pre></td></tr></table></figure>
<p>注:<em>元组中的元素角标索引是从1开始而不是0!</em></p>
<h3 id="拉链操作"><a href="#拉链操作" class="headerlink" title="拉链操作"></a>拉链操作</h3><p>使用元组的原因之一就是可以将多个值绑在一起，以便它们可以一起处理。通过<code>zip</code>方法可以很方便的实现将两个数组进行绑定:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">scala&gt; val symbols = Array(<span class="string">"&lt;"</span>,<span class="string">"-"</span>,<span class="string">"&gt;"</span>)</div><div class="line">symbols: Array[String] = Array(&lt;, -, &gt;)</div><div class="line"></div><div class="line">scala&gt; val counts = Array(1,2,3)</div><div class="line">counts: Array[Int] = Array(1, 2, 3)</div><div class="line"></div><div class="line">scala&gt; val pairs = symbols.zip(counts)</div><div class="line">pairs: Array[(String, Int)] = Array((&lt;,1), (-,2), (&gt;,3))</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录Scala中的数组(定长数组与可变长数组)定义以及常用操作,同时将映射(类似java中的集合类)以及元组也放在了这里!&lt;/p&gt;
&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;
    
    </summary>
    
      <category term="Scala" scheme="http://wiki.jassassin.com/categories/Scala/"/>
    
    
  </entry>
  
  <entry>
    <title>funcation</title>
    <link href="http://wiki.jassassin.com/2015/04/24/scala/scala-funcation/"/>
    <id>http://wiki.jassassin.com/2015/04/24/scala/scala-funcation/</id>
    <published>2015-04-24T03:04:07.000Z</published>
    <updated>2016-08-11T05:43:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了Scala中的条件表达式、循环控制以及函数定义等内容!</p>
<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>scala中的<code>if/else</code>语句会有输出,因此可以将该输出赋值给其他变量. 示例:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scala&gt; var x = 1</div><div class="line">x: Int = 1</div><div class="line"></div><div class="line"><span class="comment"># 将if语句的结果赋值给变量y</span></div><div class="line">scala&gt; var y = <span class="keyword">if</span> (x &gt; 0) <span class="string">"&gt;0"</span> <span class="keyword">else</span> <span class="string">"&lt;0"</span></div><div class="line">y: String = &gt;0</div><div class="line"></div><div class="line"><span class="comment"># 如果if和else中返回的是不同类型，则会返回它们的公共父类型。</span></div><div class="line"><span class="comment"># 如下面的String和Int的超类型Any</span></div><div class="line">scala&gt; var r = <span class="keyword">if</span>(x&gt;1) <span class="string">"hello"</span> <span class="keyword">else</span> 0</div><div class="line">r: Any = 0</div></pre></td></tr></table></figure>
<p><code>else</code>部分:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如果没有else部分,相当于 var z = if (x &gt; 2) "&gt;0" else ()</span></div><div class="line"><span class="comment"># "()"代表`没有值`的占位符,或者Unit类型(相当于java中的void)</span></div><div class="line">scala&gt; var z = <span class="keyword">if</span> (x &gt; 2) <span class="string">"&gt;0"</span></div><div class="line">z: Any = ()</div></pre></td></tr></table></figure>
<h2 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h2><p>scala中的语句块<code>{}</code>是有值的，该值是块中的最后一个表达式的值。注意对于赋值语句的表达式其结果是Unit类型，即结果为空(<code>()</code>).示例:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 最后一个表达式"a + b"的结果赋值给了sum</span></div><div class="line">scala&gt; var sum = &#123;var a =1; var b =2; a+b&#125;</div><div class="line">sum: Int = 3</div><div class="line"></div><div class="line">scala&gt; println(sum)</div><div class="line">3</div><div class="line"></div><div class="line"><span class="comment"># 因为语句块的最后一个表达式是赋值表达式，因此sum2的结果是Unit类型</span></div><div class="line">scala&gt; var sum2 = &#123;var a =1; var b =2&#125;</div><div class="line">sum2: Unit = ()</div></pre></td></tr></table></figure>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>Scala中的while和do循环和java类似，示例:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var n = 10</div><div class="line"><span class="keyword">while</span>(n &gt; 0)&#123;</div><div class="line">     //scala中没有++或--操作符</div><div class="line">     n -= 1</div><div class="line">     println(n)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>scala中没有类似java中的<code>for(int i = 0; i &lt; b; i++){}</code>循环结构，在scala中常使用如下for循环:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var n = 10</div><div class="line"><span class="keyword">for</span>(i &lt;- 1 to n)&#123;</div><div class="line">   <span class="built_in">print</span>(i + <span class="string">","</span>)</div><div class="line">&#125;</div><div class="line">----------------------------输出--------------------------------</div><div class="line">1,2,3,4,5,6,7,8,9,10,</div></pre></td></tr></table></figure>
<p>对于<code>1 to n</code>实际是调用<code>RichInt</code>类的to方法返回1到数字n(包含n)的Range区间,而<code>for(i &lt;- 表达式)</code>意思是让i遍历<code>&lt;-</code>右边的表达式的所有值。<br>从上面示例代码输出可以看出<code>1 to n</code>是包含n的，而有时我们需要i的值从1到n-1,此时可以使用<code>until</code>方法，示例:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">object cycle&#123;</div><div class="line"></div><div class="line">  def main(args: Array[String]): Unit = &#123;</div><div class="line">       var str = <span class="string">"jassassin"</span></div><div class="line">       println(str + <span class="string">"length:"</span> + str.length())</div><div class="line">       <span class="keyword">for</span>(index &lt;- 0 until str.length())&#123;</div><div class="line">         println(str(index) + <span class="string">" --- "</span> + index)</div><div class="line">       &#125;</div><div class="line">       println(<span class="string">"----------------------"</span>)</div><div class="line">	//遍历方式二</div><div class="line">       <span class="keyword">for</span>(char &lt;- str)&#123;</div><div class="line">         <span class="built_in">print</span>(char + <span class="string">" "</span>)</div><div class="line">       &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">----------------------------输出--------------------------------</div><div class="line">//注意index值从0-&gt;8并未到9</div><div class="line">jassassin length:9</div><div class="line">j --- 0</div><div class="line">a --- 1</div><div class="line">s --- 2</div><div class="line">s --- 3</div><div class="line">a --- 4</div><div class="line">s --- 5</div><div class="line">s --- 6</div><div class="line">i --- 7</div><div class="line">n --- 8  </div><div class="line">----------------------</div><div class="line">j a s s a s s i n</div></pre></td></tr></table></figure>
<h3 id="高级for循环"><a href="#高级for循环" class="headerlink" title="高级for循环"></a>高级for循环</h3><p>scala中的for循环可以以<code>变量 &lt;- 表达式</code>形式提供多个生成器，并用分号进行分隔，示例:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(i &lt;- 1 to 3; j &lt;- 1 until 3; k &lt;- 1 to 3)&#123;</div><div class="line">   <span class="built_in">print</span>(i * 100 + j * 10 + k + <span class="string">" "</span>)</div><div class="line">&#125;</div><div class="line">----------------------------输出--------------------------------</div><div class="line">111 112 113 121 122 123 211 212 213 221 222 223 311 312 313 321 322 323</div></pre></td></tr></table></figure>
<p><code>变量 &lt;- 表达式</code>可以同时携带一个if开头的Boolean表达式:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//注意<span class="string">"k &lt;- 1 to 3 if k != i"</span>,<span class="keyword">if</span>之前并没有<span class="string">";"</span></div><div class="line"><span class="keyword">for</span>(i &lt;- 1 to 3; j &lt;- 1 until 3; k &lt;- 1 to 3 <span class="keyword">if</span> k != i)&#123;</div><div class="line">  <span class="built_in">print</span>(i * 100 + j * 10 + k + <span class="string">" "</span>)</div><div class="line">&#125;</div><div class="line">----------------------------输出--------------------------------</div><div class="line">112 113 122 123 211 213 221 223 311 312 321 322</div></pre></td></tr></table></figure>
<h3 id="for推导式"><a href="#for推导式" class="headerlink" title="for推导式"></a>for推导式</h3><p>如果for循环的循环体以<code>yield</code>开头，则该循环会构造一个集合,每次迭代会生成该集合中的一个值:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">for</span>(i &lt;- 0 to 10) yield i</div><div class="line">res1: scala.collection.immutable.IndexedSeq[Int] = Vector(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</div><div class="line">scala&gt; <span class="keyword">for</span>(i &lt;- 0 to 10) yield &#123;i+1&#125;</div><div class="line">res2: scala.collection.immutable.IndexedSeq[Int] = Vector(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>scala中的函数以<code>def</code>开头,示例:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; def abs(x: Double) = <span class="keyword">if</span>(x &gt; 0) x <span class="keyword">else</span> -x</div><div class="line">abs: (x: Double)Double</div><div class="line"></div><div class="line">scala&gt; abs(-19)</div><div class="line">res3: Double = 19.0</div></pre></td></tr></table></figure>
<p>Scala中的函数参数必须给出参数的类型(x: Double)，同时scala编译器可以通过<code>=</code>右侧的表达式推测出返回值类型!但是对于递归函数则必须指定返回值类型:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; def fac(n: Int): Int = <span class="keyword">if</span>(n &lt;= 0) 1 <span class="keyword">else</span> n * fac(n-1)</div><div class="line">fac: (n: Int)Int</div><div class="line"></div><div class="line">scala&gt; fac(3)</div><div class="line">res4: Int = 6</div></pre></td></tr></table></figure>
<p>如何函数块中含有多行代码，则可以用<code>{}</code>包括进来!同时该代码块的最后一行表达式是该函数的返回值。见本文<code>语句块</code>!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">def fac(n: Int) = &#123;</div><div class="line">   var r = 1</div><div class="line"></div><div class="line">   <span class="keyword">for</span>(i &lt;- 1 to n)&#123;</div><div class="line">      r = r * i</div><div class="line">    &#125;</div><div class="line">    //该的值即为函数返回值</div><div class="line">   r</div><div class="line">&#125;</div><div class="line"></div><div class="line">def main(args: Array[String]): Unit = &#123;</div><div class="line">  println(fac(5))</div><div class="line">&#125;</div><div class="line">----------------------------输出--------------------------------</div><div class="line">120</div></pre></td></tr></table></figure>
<p>注:Scala中的<code>return</code>语句常用在匿名函数中，相当于函数break.用于跳出当前匿名函数到包含它的外围有名函数中去!</p>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>示例:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># p2,p3均有默认参数</span></div><div class="line">scala&gt; def output(p1: String,p2: String = <span class="string">"["</span>,p3: String = <span class="string">"]"</span>) = p2 + p1 + p3</div><div class="line">ouput: (p1: String, p2: String, p3: String)String</div><div class="line"></div><div class="line"><span class="comment"># 使用默认参数</span></div><div class="line">scala&gt; output(<span class="string">"jassassin"</span>)</div><div class="line">res6: String = [jassassin]</div><div class="line"></div><div class="line"><span class="comment"># 使用自定义参数</span></div><div class="line">scala&gt; output(<span class="string">"jassassin"</span>,<span class="string">"&lt;&lt;"</span>,<span class="string">"&gt;&gt;"</span>)</div><div class="line">res7: String = &lt;&lt;jassassin&gt;&gt;</div><div class="line"></div><div class="line">scala&gt; output(<span class="string">"jassassin"</span>,<span class="string">"&lt;&lt;"</span>)</div><div class="line">res8: String = &lt;&lt;jassassin]</div></pre></td></tr></table></figure>
<h4 id="带名参数"><a href="#带名参数" class="headerlink" title="带名参数"></a>带名参数</h4><p>调用scala函数传递参数时，可以同时传递参数名称，这样调用函数的参数顺序可以自由排列。如上面的ouput函数:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; output(p3=<span class="string">"&gt;"</span>,p1=<span class="string">"eagle"</span>,p2=<span class="string">"&lt;"</span>)</div><div class="line">res3: String = &lt;eagle&gt;</div></pre></td></tr></table></figure>
<h4 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h4><p>如下可接受可变长参数的函数:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">def sum(arg: Int*) = &#123;</div><div class="line">    var sum = 0</div><div class="line">    <span class="keyword">for</span>(i &lt;- arg)&#123;</div><div class="line">      sum += i</div><div class="line">    &#125;</div><div class="line">    sum</div><div class="line">&#125;</div><div class="line"></div><div class="line">//调用</div><div class="line">sum(1,2,3,4)</div><div class="line">----------------------------输出--------------------------------</div><div class="line">10</div></pre></td></tr></table></figure>
<p>注:如果调用此函数时传递的是单个参数，则该参数必须是单个整数，而不是一个整数区间!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">scala&gt; sum(1 to 5)</div><div class="line">&lt;console&gt;:9: error: <span class="built_in">type</span> mismatch;</div><div class="line"> found   : scala.collection.immutable.Range.Inclusive</div><div class="line"> required: Int</div><div class="line">              sum(1 to 5)</div><div class="line">                    ^</div></pre></td></tr></table></figure>
<p>解决方式:追加<code>_*</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; sum(1 to 5: _*)</div><div class="line">res6: Int = 15</div></pre></td></tr></table></figure>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>如果函数体包含在<code>{}</code>中，但是前面没有”=”。则称这样函数为过程!过程不返回值，调用它只是为了它的副作用，如下面的打印参数:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; def p(arg: String)&#123;<span class="built_in">print</span>(arg)&#125;</div><div class="line">p: (arg: String)Unit</div><div class="line"></div><div class="line">scala&gt; p(<span class="string">"eagle"</span>)</div><div class="line">eagle</div></pre></td></tr></table></figure>
<p>通常建议的写法是显示声明函数返回值为<code>Unit</code>,从而尽量提醒比如java程序员习惯性的误调用!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">scala&gt; def out(arg: String): Unit = &#123;<span class="built_in">print</span>(arg)&#125;</div><div class="line">out: (arg: String)Unit</div><div class="line"></div><div class="line">scala&gt; out(<span class="string">"eagle"</span>)</div><div class="line">eagle</div><div class="line"></div><div class="line"><span class="comment"># 这里定义变量result期望获取out()函数的输出"eagle",而实际获得的是Unit</span></div><div class="line">scala&gt; var result = out(<span class="string">"eagle"</span>)</div><div class="line">eagleresult: Unit = ()</div><div class="line"></div><div class="line">scala&gt; <span class="built_in">print</span>(result)</div><div class="line">()</div></pre></td></tr></table></figure>
<h2 id="惰性初始化"><a href="#惰性初始化" class="headerlink" title="惰性初始化"></a>惰性初始化</h2><p>当val类型的变量被<code>lazy</code>修饰时，那么该变量的初始化将被延迟至它第一次被访问。该特性常用于初始化开销比较大的应用，如文件读取!</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>Scala中的异常和java中的基本一致，不同的是scala中没有”检查”型异常。因此scala中的方法签名中不会显示的标识<code>someMethod() throws IOException,XXException ...</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了Scala中的条件表达式、循环控制以及函数定义等内容!&lt;/p&gt;
&lt;h2 id=&quot;if语句&quot;&gt;&lt;a href=&quot;#if语句&quot; class=&quot;headerlink&quot; title=&quot;if语句&quot;&gt;&lt;/a&gt;if语句&lt;/h2&gt;&lt;p&gt;scala中的&lt;code&gt;if/else
    
    </summary>
    
      <category term="Scala" scheme="http://wiki.jassassin.com/categories/Scala/"/>
    
    
  </entry>
  
  <entry>
    <title>concurrent tools</title>
    <link href="http://wiki.jassassin.com/2015/04/10/java/concurrent-tools/"/>
    <id>http://wiki.jassassin.com/2015/04/10/java/concurrent-tools/</id>
    <published>2015-04-10T07:13:36.000Z</published>
    <updated>2016-08-11T05:39:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h2><p>同步工具类可以使任何一种对象，只要该对象可以根据自身的状态来协调控制线程的控制流。阻塞队列可以作为同步工具类，其他类型的同步工具类还包括：信号量（Semaphore）、栅栏（Barrier）以及闭锁（Latch）等。</p>
<h2 id="1-闭锁CountDownLatch"><a href="#1-闭锁CountDownLatch" class="headerlink" title="1. 闭锁CountDownLatch"></a>1. 闭锁CountDownLatch</h2><p>CountDownLatch 闭锁: 可以延迟线程的进度，直到锁到达终止状态。闭锁的作用相当于一扇门，在锁到达终止状态之前这扇门一直是关闭的。当锁到达终止状态时，允许所有线程通过。CountDownLatch有一个初始值，通过调用<code>countDown</code>方法可以减少该值，一直到0时到达终止状态。<br>闭锁可以用来确保某些活动直到其它活动都完成后才继续执行，例如：</p>
<ol>
<li>确保某个计算在其所有资源都被初始化之后才继续执行。二元闭锁（只有两个状态）可以用来表示“资源R已经被初始化”，而所有需要R操作都必须先在这个闭锁上等待。</li>
</ol>
<a id="more"></a>
<ol>
<li>确保某个服务在所有其他服务都已经启动之后才启动。这时就需要多个闭锁。让S在每个闭锁上等待，只有所有的闭锁都打开后才会继续运行。</li>
<li>等待直到某个操作的参与者（例如，多玩家游戏中的玩家）都就绪再继续执行。在这种情况下，当所有玩家都准备就绪时，闭锁将到达结束状态。</li>
</ol>
<p>Demo:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 闭锁  延迟线程进度直到线程到达某个状态</div><div class="line"> * <span class="doctag">@author</span> eagle</div><div class="line"> * <span class="doctag">@date</span> 2015年4月14日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		<span class="comment">//count(2): 在线程通过此闭锁门之前，CountDownLatch的countDown方法必须被线程调用的次数</span></div><div class="line">		CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</div><div class="line">		Worker worker1 = <span class="keyword">new</span> Worker(latch);</div><div class="line">		Worker worker2 = <span class="keyword">new</span> Worker(latch);</div><div class="line"></div><div class="line">		<span class="comment">//启动线程</span></div><div class="line">		worker1.start();</div><div class="line">		worker2.start();</div><div class="line"></div><div class="line">		<span class="comment">//await()方法则阻塞，直到计数器值count变为0</span></div><div class="line">		latch.await();</div><div class="line"></div><div class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">": over!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">		<span class="keyword">private</span> CountDownLatch latch;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(CountDownLatch latch)</span></span>&#123;</div><div class="line">			<span class="keyword">this</span>.latch = latch;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">": running!"</span>);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">1000</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			latch.countDown();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-FutureTask"><a href="#2-FutureTask" class="headerlink" title="2. FutureTask"></a>2. FutureTask</h2><p>FutureTask: 用于执行一个可返回结果的长任务，任务在单独的线程中执行，其他线程可以用<code>get</code>方法取任务结果，如果任务尚未完成，线程在get上阻塞。<br>FutureTask也可以用作闭锁。它表示一种抽象的可生成结果的计算。是通过<code>Callable</code>来实现的，相当于一种可生成结果的<code>Runnable</code>，并且可处于以下三种状态：等待运行，正在运行，运行完成。当FutureTask进入完成状态后，它会停留在这个状态上。<code>Future.get</code>方法用来获取计算结果，如果FutureTask还未运行完成，则会阻塞。FutureTask将计算结果从执行计算的线程传递到获取这个结果的线程，而FutureTask 的规范确保了这种传递过程能实现结果的安全发布。FutureTask在Executor框架中表示异步任务，还可以用来表示一些时间较长的计算。<br><img src="/imgs/java/futureTask.jpg" alt="futureTask"><br>Demo:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">import java.util.concurrent.Callable;</div><div class="line">import java.util.concurrent.ExecutionException;</div><div class="line">import java.util.concurrent.ExecutorService;</div><div class="line">import java.util.concurrent.Executors;</div><div class="line">import java.util.concurrent.FutureTask;</div><div class="line"></div><div class="line">/**</div><div class="line"> * FutureTask可以作为闭锁使用。该类的计算是通过Callable实现的，它等价于一个可携带结果的Runnable，</div><div class="line"> * 并且有3个状态:等待、运行、完成</div><div class="line"> * 完成包括所有计算以任意的方式结束，包括正常结束、取消和异常</div><div class="line"> * @author eagle</div><div class="line"> * @date 2015年4月15日</div><div class="line"> */</div><div class="line">public class FutureTaskTest &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</div><div class="line">		ExecutorService executorService = Executors.newFixedThreadPool(2);</div><div class="line">		FutureTask&lt;String&gt; futureTask = new FutureTask&lt;String&gt;(new Task());</div><div class="line">		//启动task线程</div><div class="line">		executorService.submit(futureTask);</div><div class="line">		//住线程继续运行</div><div class="line">		System.out.println(<span class="string">"main thread run over!"</span>);</div><div class="line">		//检查task是否执行完毕</div><div class="line">		<span class="keyword">while</span>(!futureTask.isDone())&#123;</div><div class="line">			System.out.println(<span class="string">"futureTask status is running!"</span>);</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"task run over!"</span>);</div><div class="line">		//获取线程执行结果，这里会阻塞直到线程执行完毕返回结果</div><div class="line">		String result = futureTask.get();</div><div class="line">		System.out.println(<span class="string">"task run result:"</span> + result);</div><div class="line">		executorService.shutdown();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private static class Task implements Callable&lt;String&gt;&#123;</div><div class="line"></div><div class="line">		@Override</div><div class="line">		public String call() throws Exception &#123;</div><div class="line">			Thread.sleep(10);</div><div class="line">			System.out.println(<span class="string">"task be called!"</span>);</div><div class="line">			<span class="built_in">return</span> <span class="string">"task"</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3-Semaphore"><a href="#3-Semaphore" class="headerlink" title="3. Semaphore"></a>3. Semaphore</h2><p>Semaphore信号量:</p>
<ul>
<li>用于控制同时访问某资源，或同时执行某操作的线程数目。Semaphone管理这一组许可（permit），可通过构造函数指定。提供了阻塞方法<code>acquire</code>，用来获取许可。同时提供了<code>release</code>方法表示释放一个许可。</li>
<li>之前的闭锁控制的是访问时间，而信号量则用来控制访问某个特定资源的操作数量，控制空间。而且闭锁只能够减少，一次性使用，而信号量则申请可释放，可增可减。 计数信号量还可以用来实现某种资源池，或者对容器施加边界。</li>
<li>Semaphone可以将任何一种容器变为有界阻塞容器，如用于实现资源池。例如数据库连接池。我们可以构造一个固定长度的连接池，使用阻塞方法 acquire和release获取释放连接，而不是获取不到便失败。</li>
</ul>
<p>Demo:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Semaphore实现的功能就类似厕所有5个坑，假如有10个人要上厕所，那么同时只能有多少个人去上厕所呢？</div><div class="line"> * 同时只能有5个人能够占用，当5个人中 的任何一个人让开后，其中等待的另外5个人中又有一个人可以占用了。</div><div class="line"> * 另外等待的5个人中可以是随机获得优先机会，也可以是按照先来后到的顺序获得机会，这取决于构造Semaphore对象时</div><div class="line"> * 传入的参数选项。单个信号量的Semaphore对象可以实现互斥锁的功能，并且可以是由一个线程获得了“锁”，</div><div class="line"> * 再由另一个线程释放“锁”，这可应用于死锁恢复的一些场合。</div><div class="line"> * <span class="doctag">@author</span> eagle</div><div class="line"> * <span class="doctag">@date</span> 2015年4月15日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ExecutorService executorService = Executors.newCachedThreadPool();</div><div class="line">		<span class="comment">//初始化5个许可证</span></div><div class="line">		Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">5</span>);</div><div class="line">		<span class="comment">//启动50个线程运行</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++)&#123;</div><div class="line">			executorService.submit(<span class="keyword">new</span> Task(semaphore));</div><div class="line">		&#125;</div><div class="line">		executorService.shutdown();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> Semaphore semaphore;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(Semaphore semaphore)</span></span>&#123;</div><div class="line">			<span class="keyword">this</span>.semaphore = semaphore;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				semaphore.acquire();</div><div class="line">				System.out.println(Thread.currentThread().getName()</div><div class="line">							+ <span class="string">" is running!"</span>);</div><div class="line">				Thread.sleep(<span class="number">1000</span>);</div><div class="line">				semaphore.release();</div><div class="line">				 System.out.println(<span class="string">"------"</span> + semaphore.availablePermits());</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="4-CyclicBarrier"><a href="#4-CyclicBarrier" class="headerlink" title="4. CyclicBarrier"></a>4. CyclicBarrier</h2><p>CyclicBarrier栅栏: 用于多个线程多次迭代时进行同步，在一轮任务中，任何线程完成任务后都在<code>barrier</code>上等待，直到所有其他线程也完成任务，然后一起释放，同时进入下一轮迭代。<br>栅栏（Bariier）类似于闭锁，它能阻塞一组线程知道某个事件发生。栅栏与闭锁的关键区别在于，所有的线程必须同时到达栅栏位置，才能继续执行。闭锁用于等待等待时间，而栅栏用于等待线程。<br>CyclicBarrier可以使一定数量的参与方反复的在栅栏位置汇聚，它在并行迭代算法中非常有用：将一个问题拆成一系列相互独立的子问题。当线程到达栅栏位置时，调用await()方法，这个方法是阻塞方法，直到所有线程到达了栅栏位置，那么栅栏被打开，此时所有线程被释放，而栅栏将被重置以便下次使用.<br>Demo:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。</div><div class="line"> * 在涉及一组固定大小的线程的程序中，这些线程必须不时地互相等待，此时 CyclicBarrier 很有用。因为该 barrier</div><div class="line"> * 在释放等待线程后可以重用，所以称它为循环 的 barrier</div><div class="line"> * <span class="doctag">@author</span> eagle</div><div class="line"> * <span class="doctag">@date</span> 2015年4月15日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ExecutorService executorService = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line">		<span class="comment">//注意，这里CyclicBarrier构造传入的parties参数值是3，那么应该有三个线程，否则会一直阻塞下去</span></div><div class="line">		CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>);</div><div class="line"></div><div class="line">		executorService.submit(<span class="keyword">new</span> Runner(cyclicBarrier, <span class="string">"jack"</span>));</div><div class="line">		executorService.submit(<span class="keyword">new</span> Runner(cyclicBarrier, <span class="string">"rose"</span>));</div><div class="line">		executorService.submit(<span class="keyword">new</span> Runner(cyclicBarrier, <span class="string">"tony"</span>));</div><div class="line"></div><div class="line">		executorService.shutdown();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> CyclicBarrier cyclicBarrier;</div><div class="line">		<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Runner</span><span class="params">(CyclicBarrier cyclicBarrier, String name)</span> </span>&#123;</div><div class="line">			<span class="keyword">super</span>();</div><div class="line">			<span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</div><div class="line">			<span class="keyword">this</span>.name = name;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">2000</span>);</div><div class="line">				System.out.println(name + <span class="string">" is ready ..."</span>);</div><div class="line">				<span class="comment">//等待所有线程都ready就绪</span></div><div class="line">				<span class="keyword">this</span>.cyclicBarrier.await();</div><div class="line">				<span class="comment">//所有线程都ready就绪，同时开始running</span></div><div class="line">				System.out.println(name + <span class="string">" is running ..."</span>);</div><div class="line">				<span class="comment">//等待所有线程running结束</span></div><div class="line">				<span class="keyword">this</span>.cyclicBarrier.await();</div><div class="line">				System.out.println(name + <span class="string">" is run over ..."</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>参考:</p>
<ul>
<li><a href="http://www.2cto.com/kf/201412/359051.html" target="_blank" rel="external">Java 并发编程（四）常用同步工具类</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引文&quot;&gt;&lt;a href=&quot;#引文&quot; class=&quot;headerlink&quot; title=&quot;引文&quot;&gt;&lt;/a&gt;引文&lt;/h2&gt;&lt;p&gt;同步工具类可以使任何一种对象，只要该对象可以根据自身的状态来协调控制线程的控制流。阻塞队列可以作为同步工具类，其他类型的同步工具类还包括：信号量（Semaphore）、栅栏（Barrier）以及闭锁（Latch）等。&lt;/p&gt;
&lt;h2 id=&quot;1-闭锁CountDownLatch&quot;&gt;&lt;a href=&quot;#1-闭锁CountDownLatch&quot; class=&quot;headerlink&quot; title=&quot;1. 闭锁CountDownLatch&quot;&gt;&lt;/a&gt;1. 闭锁CountDownLatch&lt;/h2&gt;&lt;p&gt;CountDownLatch 闭锁: 可以延迟线程的进度，直到锁到达终止状态。闭锁的作用相当于一扇门，在锁到达终止状态之前这扇门一直是关闭的。当锁到达终止状态时，允许所有线程通过。CountDownLatch有一个初始值，通过调用&lt;code&gt;countDown&lt;/code&gt;方法可以减少该值，一直到0时到达终止状态。&lt;br&gt;闭锁可以用来确保某些活动直到其它活动都完成后才继续执行，例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确保某个计算在其所有资源都被初始化之后才继续执行。二元闭锁（只有两个状态）可以用来表示“资源R已经被初始化”，而所有需要R操作都必须先在这个闭锁上等待。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java" scheme="http://wiki.jassassin.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>garbage collector</title>
    <link href="http://wiki.jassassin.com/2014/06/10/jvm/jvm-gc/"/>
    <id>http://wiki.jassassin.com/2014/06/10/jvm/jvm-gc/</id>
    <published>2014-06-10T07:13:36.000Z</published>
    <updated>2016-08-11T05:41:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h2><p>垃圾收集器是对各种针对内存回收算法的具体实现。由于Java虚拟机规范中对垃圾收集器的实现没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器可能存在很大的差别。在阅读本文之前，希望你对jvm的基本内存结构以及基本垃圾收集算法有一些基本的了解。你可以参考本人的其他两篇博客<a href="http://blog.jassassin.com/2014/06/02/jvm/jvm-memory/" target="_blank" rel="external">&lt;&lt;深入Java虚拟机&gt;&gt;笔记之Java内存区域</a>、<a href="http://blog.jassassin.com/2014/06/05/jvm/jvm-gc-alg/" target="_blank" rel="external">&lt;&lt;深入Java虚拟机&gt;&gt;笔记之垃圾收集算法</a>。当然，你也可以参考其他的网络文章。</p>
<p><img src="/imgs/jvm/gc3.jpg" alt="gc3.jpg"></p>
<p>上图中所列的是下文要逐个说明的具体垃圾收集器。其中两者之间存在连线的收集器可以搭配使用。</p>
<h2 id="Stop-The-World"><a href="#Stop-The-World" class="headerlink" title="Stop The World"></a>Stop The World</h2><p>在继续说明垃圾收集器之前，先来说明下什么是”Stop The World”。在可达性分析中从GC Roots节点找引用链操作时会造成GC停顿，因为这项分析工作必须在一个能确保一致性的快照中进行，这里的”一致性”是指在整个分析期间整个执行系统看起来就像被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化的情况。这点是导致GC进行时必须停顿所有Java执行线程(Sun将这件事情称为”Stop The World”)的其中一个重要原因。基本上每种垃圾收集器都在着眼于减少这部分的时间。</p>
<h2 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h2><p>在Hotspot虚拟机实现中，使用<em>OopMap</em>的数据结构在类加载完成时，HotSpot就把对象内什么偏移量是什么类型的数据计算出来，在JIT编译过程中，在待定的位置记录下栈和寄存器中哪些位置是引用。这样，GC在扫描时就可以直接得知哪些地方存着对象的引用。而实际上，HotSpot没有为每条指令都生成OopMap，其知识在”特定的位置”记录了这些信息，这些位置称为安全点(Safepoint)，即<em>程序执行时并非在所有地方都能停顿下来GC，只有在到达安全点时才能暂停</em>。</p>
<h2 id="新生代收集器"><a href="#新生代收集器" class="headerlink" title="新生代收集器"></a>新生代收集器</h2><h3 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h3><p>Serial收集器是JDK 1.3.1之前的虚拟机新生代收集的唯一选择。这个收集器是一个单线程的收集器，而且它在进行垃圾收集时<em>必须暂停其他所有的工作线程(Stop The World)</em>，直到它收集结束。”Stop The World”，由虚拟机在后台自动发起和自动完成。下图是Serial/Serial Old收集器的运行过程:<br><img src="/imgs/jvm/serial.jpg" alt="serial.jpg"><br>注:Serial收集器是虚拟机运行在Client模式下的默认新生代收集器。简单而高效，特别是对于单个CPU环境。</p>
<h3 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h3><p>ParNew收集器是Serial收集器的多线程版本，除使用多线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数、收集算法、Stop The World、对象分配规则、回收策略都与Serial收集器完全一样。<br><img src="/imgs/jvm/parnew.png" alt="parnew"><br>注:</p>
<ul>
<li>目前来说，新生代只有Serial和ParNew收集器可以与老年代的CMS收集器配合工作</li>
<li>在单CPU环境下ParNew并不比Serial收集器有更好的效果，甚至可能不如后者(频繁的线程切换)</li>
<li>ParNew收集器默认开启的线程数与CPU的数量相同，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数</li>
</ul>
<h3 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h3><p>Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器，看上去和ParNew一样。</p>
<ul>
<li>Parallel Scavenge收集器的目标是达到一个可控制的吞吐量(吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间))。所谓吞吐量指的是CPU用于运行用户代码的时间与CPU总消耗时间的比值。</li>
<li>Parallel Scavenge收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间的-XX:MaxGCPauseMillis参数以及直接设置吞吐量大小的-XX:GCTimeRatio参数</li>
<li>Parallel Scavenge收集器提供了开关参数-XX:UseAdaptiveSizePolicy，当打开这个参数时，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略。</li>
<li>自适应调节策略是Parallel Scavenge收集器与ParNew收集器的一个重要区别。</li>
</ul>
<h2 id="老年代收集器"><a href="#老年代收集器" class="headerlink" title="老年代收集器"></a>老年代收集器</h2><h3 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h3><p>Serial Old收集器是Serial收集器的老年代版本，它同样是一个单线程收集器，使用”标记-整理”算法。<br>Client模式</p>
<ul>
<li>用于给Client模式下的虚拟机使用</li>
</ul>
<p>Server模式</p>
<ul>
<li>在JDK1.5以及之前的版本中与Parallel Scavenge收集器搭配使用</li>
<li>作为CMS收集器的后背预案</li>
</ul>
<h3 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h3><p>Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。这个收集器在JDK1.6中才出现。而且，在JDK1.5以及之前版本如果新生代使用Parallel Scavenge收集器，则老年代只能使用Serial Old收集器。<br>注:</p>
<ul>
<li>Parallel Old可以和Parallel Scavenge收集器配合使用。特别是在吞吐量以及CPU敏感的场合。</li>
</ul>
<p>Parallel Old收集器工作过程如下图:<br><img src="/imgs/jvm/parallel-old.png" alt="parallel-old"></p>
<h3 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h3><p>CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的收集器。<br>CMS收集器是基于”标记-清除”算法实现的，整个过程分为以下4个步骤:</p>
<ul>
<li>初始标记(CMS initial mark)，需要”Stop The World”,仅仅标记GC Roots能直接关联到得对象</li>
<li>并发标记(CMS concurrent mark)，进行GC Roots Tracing的过程</li>
<li>重新标记(CMS remark)，修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录</li>
<li>并发清除(CMS concurrent sweep)<br>其过程如下图所示:</li>
</ul>
<p><img src="/imgs/jvm/cms.jpg" alt="cms"></p>
<p>由于整个过程中耗时最长的并发标记和并发清除过程收集器都可以与用户线程一起工作。因此，从总体上看，CMS收集器的内存回收过程是与用户线程一起并发执行的。</p>
<p>CMS的缺点:</p>
<ol>
<li><p>CMS收集器对CPU资源非常敏感。在CMS进行并发标记和并发清除时虽然不会导致用户线程停顿，但是会因为占用了一部分CPU资源从而导致应用程序变慢，总吞吐量会降低。CMS默认启动的回收线程数是(CPU数量+3)/4，也就是当CPU在4个以上时，并发回收垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但当CPU资源不足4个时，CMS对用户程序的影响就可能变得很大。</p>
</li>
<li><p>CMS收集器无法处理浮动垃圾，可能出现”Concurrent Mode Failure”失败而导致另一次Full GC的产生。由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾产生，这部分垃圾出现在标记过程之后，CMS无法在当次收集中处理它们，只好留待下一次GC时再清理掉。这部分垃圾就称为”浮动垃圾”。由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。在JDK1.5中，CMS收集器当老年代使用了68%的空间后就会被激活。如果在应用中老年代增长不是太快，可以适当调高参数-XX:CMSInitiatingOccupancyFraction的值来提高触发百分比，以降低内存回收次数从而获取更好的性能，在JDK1.6中，CMS收集器的启动阈值已经提升到92%。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次”Concurrent Mode Failure”失败，这时虚拟机将启动后备预案:临时启动Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。因此参数-XX:CMSInitiatingOccupancyFraction设置的太高很容易导致大量”Conurrent Mode Failure”失败，性能反而降低。</p>
</li>
<li><p>内存碎片。由于CMS基于”标记-清除”算法实现的，因此会产生大量的空间碎片。空间碎片过多时，将会给大对象分配带来很大麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。为了解决这个问题，CMS收集器提供了一个-XX:UseCMSCompactAtFullCollection开关参数(默认开启)，用于在CMS收集器顶不住要进行Full GC时开启内存碎片的合并整理过程，内存整体的过程是无法并发的，因此停顿时间将变长。虚拟机还设计了参数-XX:CMSFullGCsBeforeCompaction，用于设置执行多少次不压缩的Full GC后，跟着进行一次带压缩的Full GC。</p>
</li>
</ol>
<h2 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h2><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>每种收集器都有自己的优缺点，可以根据具体的生产环境组合权衡使用。</p>
<hr>
<p>参考 <a href="http://item.jd.com/11252778.html" target="_blank" rel="external">深入Java虚拟机</a>/chapter03 垃圾收集器与内存分配策略</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引文&quot;&gt;&lt;a href=&quot;#引文&quot; class=&quot;headerlink&quot; title=&quot;引文&quot;&gt;&lt;/a&gt;引文&lt;/h2&gt;&lt;p&gt;垃圾收集器是对各种针对内存回收算法的具体实现。由于Java虚拟机规范中对垃圾收集器的实现没有任何规定，因此不同的厂商、不同版本的虚拟机所提供
    
    </summary>
    
      <category term="JVM" scheme="http://wiki.jassassin.com/categories/JVM/"/>
    
    
  </entry>
  
  <entry>
    <title>garbage collection algorithm</title>
    <link href="http://wiki.jassassin.com/2014/06/05/jvm/jvm-gc-alg/"/>
    <id>http://wiki.jassassin.com/2014/06/05/jvm/jvm-gc-alg/</id>
    <published>2014-06-05T07:39:34.000Z</published>
    <updated>2016-08-11T05:41:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h2><p>内存动态分配以及垃圾自动收集技术是Java语言中得两个重要的特性。垃圾收集(Garbage Collection,GC),主要用来解决3个问题：</p>
<ol>
<li>哪些内存需要回收?</li>
<li>什么时候回收?</li>
<li>如何回收?</li>
</ol>
<p>本文主要介绍的是如何确定哪些对象需要回收，以及常见的垃圾回收算法思想。也就是主要关注上面三点中的1和3点。至于什么时候回收由具体的垃圾收集器确定。理解常见的垃圾算法思想以及各种算法的优缺点再加上各种JVM内存分配的特点，对于理解各种垃圾收集器的应用场景会有很大的帮助。</p>
<h2 id="哪些内存需要回收"><a href="#哪些内存需要回收" class="headerlink" title="哪些内存需要回收"></a>哪些内存需要回收</h2><p>Java程序运行分配的实例对象几乎都分配在Java堆中。Java堆也是垃圾收集器主要作用的内存区域。那么，在对Java堆进行回收之前，首先就需要确定哪些对象可以被回收?目前常用的有引用计数算法以及可达性分析算法等。但是由于引用计数算法的循环引用问题，几乎没有被任何的Java Jvm所采用。</p>
<h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><ul>
<li>基本思想</li>
</ul>
<p>当在Java堆中创建一个对象时会同时给其添加一个引用计数器，每当有一个地方引用它时，计算器的值就加1；当失去该引用时，计数器就减1；当计数器为0时，那么就表示该对象可以被回收了。</p>
<ul>
<li>优点</li>
</ul>
<p>实现简单，判定效率高！</p>
<ul>
<li>缺点</li>
</ul>
<p>对象之间相互引用问题<br>比如如下的代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceCounting</span></span>&#123;</div><div class="line">	<span class="keyword">public</span> Object obj = <span class="keyword">null</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		ReferenceCounting obj1 = <span class="keyword">new</span> ReferenceCounting();</div><div class="line">		ReferenceCounting obj2 = <span class="keyword">new</span> ReferenceCounting();</div><div class="line"></div><div class="line">		obj1.obj = obj2;</div><div class="line">		obj2.obj = obj1;</div><div class="line"></div><div class="line">		obj1 = <span class="keyword">null</span>;</div><div class="line">		obj2 = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		System.gc();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于上面代码中的obj1以及obj2理应被垃圾回收，但是由于两者之间存在着相互引用。因此造成其无法被回收。<br>因此，目前的主流垃圾收集器均为采用此种算法。</p>
<h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><ul>
<li>基本思想<br>通过一系列称为”GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索的路径称为引用链(Reference Chain),当一个对象到GC Roots没有任何引用链相连时(不可达),则证明此对象是不可用的,如下图所示:图中黄色背景文字部分是指可以作为GC Roots的对象<br><img src="/imgs/jvm/gc1.png" alt="gc1"></li>
</ul>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>JDK1.2之后，Java将引用分为<em>强引用(Stong Reference)</em>、<em>软引用(Soft Reference)</em>、<em>弱引用(Weak Reference)</em>、<em>虚引用(Phantom Reference)</em>,这四种引用强度逐渐减弱:</p>
<ul>
<li>强引用</li>
</ul>
<p>类似”Object obj = new Object()”这类引用，只要存在该引用，则垃圾收集器永远不会回收掉得对象。</p>
<ul>
<li>软引用</li>
</ul>
<p>一些还有用但非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出之前，将会把这些对象列进回收范围之中进行第二次回收。</p>
<ul>
<li>弱引用</li>
</ul>
<p>一些非必需对象。被该引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</p>
<ul>
<li>虚引用</li>
</ul>
<p>最弱的一种引用关系。一个对象是否存在虚引用，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用的唯一目的就是在这个对象被收集器回收时得到一个系统通知。</p>
<h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><ul>
<li>基本思想</li>
</ul>
<p>“标记 - 清除”(Mark-Sweep)算法，主要分为“标记”和“清除”两个阶段。首先标记出所有需要回收的对象，然后再统一回收清除。</p>
<ul>
<li>缺点</li>
</ul>
<ol>
<li>效率低</li>
<li>产生内存碎片。如果内存中存在大量的内存碎片，那么可能会导致以后在程序运行时分配大对象时，由于无法找到足够的连续内存空间而不得不提前触发一次垃圾收集动作。</li>
</ol>
<h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><ul>
<li>基本思想</li>
</ul>
<p>将内存分为大小相等的两块，每次只使用其中的一块。当进行垃圾回收时，将其中存货的对象复制到另外一块未使用的内存空间。然后清空原来的一半内存空间。</p>
<ul>
<li>优点</li>
</ul>
<p>简单，不会产生内存碎片</p>
<ul>
<li>缺点</li>
</ul>
<p>当原来一块中存在大量的存活对象时，造成复制所回收的内存空间很小。同时此时复制很多或很大的对象会给JVM带来较大的压力。</p>
<p>现在的商业虚拟机一般使用这种算法来回收新生代。例如SUN JDK的默认虚拟机HotSpot,如下所示是简单的Java堆内存分配图:<br><img src="/imgs/jvm/gc2.png" alt="gc2"><br>新生代只所以会采用这种回收方式，其中一个重要的假定条件是：IBM公司研究表明新生代中98%的对象是”朝生夕死”的。因此，HotSpot虚拟机将内存分为一块较大的Eden空间和两块较小的Survivor空间(两个较小的Survivor空间大小相等)。Eden空间与其中一个Survivor空间的比值是8:1。每次分配新的对象时，会在Eden区或者其中一个Survivor区进行分配。当进行回收时，则将前面两个区中仍存活的对象复制到另外一个未曾使用的Survivor区。如果新产生的实例对象太大或者Survivor空间不足，则可能直接将对象放入老年代。</p>
<h3 id="标记整理"><a href="#标记整理" class="headerlink" title="标记整理"></a>标记整理</h3><ul>
<li>基本思想<br>有些类似”标记-清理”。首先对需要回收的对象进行标记，<em>然后让所有存活的对象都向堆内存的一端移动</em>，最后再直接清理掉存活对象区域边界以外的内存。</li>
</ul>
<h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><ul>
<li>基本思想<br>根据对象存活周期的不同将内存划为几块。一般把Java堆划分为新生代与老年代，然后根据各个年代的特点采用适当的收集算法。当前商业虚拟机的垃圾收集都是采用“分代收集”(Generational Collection)。<br>新生代，对象的存活率较低，一般采用复制算法。<br>老年代，对象存活时间较长，一般采用“标记-清理”或“标记-整理”算法来进行回收。</li>
</ul>
<hr>
<p>参考 <a href="http://item.jd.com/11252778.html" target="_blank" rel="external">深入Java虚拟机</a>/chapter03 垃圾收集器与内存分配策略</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引文&quot;&gt;&lt;a href=&quot;#引文&quot; class=&quot;headerlink&quot; title=&quot;引文&quot;&gt;&lt;/a&gt;引文&lt;/h2&gt;&lt;p&gt;内存动态分配以及垃圾自动收集技术是Java语言中得两个重要的特性。垃圾收集(Garbage Collection,GC),主要用来解决3个问
    
    </summary>
    
      <category term="JVM" scheme="http://wiki.jassassin.com/categories/JVM/"/>
    
    
  </entry>
  
  <entry>
    <title>memory</title>
    <link href="http://wiki.jassassin.com/2014/06/02/jvm/jvm-memory/"/>
    <id>http://wiki.jassassin.com/2014/06/02/jvm/jvm-memory/</id>
    <published>2014-06-02T15:45:12.000Z</published>
    <updated>2016-08-11T05:46:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h2><p><a href="http://baike.baidu.com/view/374952.htm?fr=aladdin" target="_blank" rel="external">Java虚拟机</a>在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途、创建和销毁的时间，有些区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。<br>下图是Java虚拟机所管理的几个运行时数据区域图:</p>
<p><img src="/imgs/jvm/Java-Memory.png" alt="java-memory"></p>
<h2 id="线程隔离数据区"><a href="#线程隔离数据区" class="headerlink" title="线程隔离数据区"></a>线程隔离数据区</h2><p>所谓线程隔离数据区是指在多线程环境下，每个线程所独享的数据区域。主要有程序计数器、Java虚拟机栈、本地方法栈三个数据区。</p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p><a href="http://baike.baidu.com/view/178145.htm?fr=aladdin" target="_blank" rel="external">程序计数器</a> — 计算机处理器中的寄存器，它包含当前正在执行的指令的地址（位置）。当每个指令被获取，程序计数器的存储地址加一。在每个指令被获取之后，程序计数器指向顺序中的下一个指令。当计算机重启或复位时，程序计数器通常恢复到零。<br>在Java中<a href="http://baike.baidu.com/view/178145.htm?fr=aladdin" target="_blank" rel="external">程序计数器</a>是一块较小的内存空间，充当当前线程所执行的字节码的行号指示器的角色。<br>在多线程环境下，当某个线程失去处理器执行权时，需要记录该线程被切换出去时所执行的程序位置。从而方便该线程被切换回来(重新被处理器处理)时能恢复到当初的执行位置，因此每个线程都需要有一个独立的<a href="http://baike.baidu.com/view/178145.htm?fr=aladdin" target="_blank" rel="external">程序计数器</a>。各个线程的<a href="http://baike.baidu.com/view/178145.htm?fr=aladdin" target="_blank" rel="external">程序计数器</a>互不影响，并且独立存储。</p>
<ul>
<li>当线程正在执行一个java方法时，这个程序计数器记录的时正在执行的虚拟机字节码<a href="http://baike.baidu.com/view/178461.htm?fr=aladdin" target="_blank" rel="external">指令</a>的地址。</li>
<li>当线程执行的是<a href="http://www.enet.com.cn/article/2007/1029/A20071029886398.shtml" target="_blank" rel="external">Native方法</a>,这个计数器值为空。</li>
<li>此内存区域是唯一一个在java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</li>
</ul>
<h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>Java虚拟机栈描述的是Java方法执行的内存模型，每个方法在执行的同时都会创建一个<a href="http://baike.baidu.com/view/8128123.htm?fr=aladdin" target="_blank" rel="external">栈帧</a>用于存储<a href="http://blog.csdn.net/kevin_luan/article/details/22986081" target="_blank" rel="external">局部变量表</a>、<a href="http://denverj.iteye.com/blog/1218359" target="_blank" rel="external">操作数栈</a>、<a href="http://jnn.iteye.com/blog/83105" target="_blank" rel="external">动态链接</a>、方法出口等信息。每个方法从调用直至执行完成的过程，对应着一个栈帧在虚拟机中入栈到进栈的过程。</p>
<ul>
<li>如果线程请求的栈深度大于虚拟机所能允许的深度时将抛出*StackOverflowError异常(可以通过无限递归呈现此异常)</li>
<li>如果虚拟机在扩展时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</li>
</ul>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈与虚拟机栈作用相似，区别在于虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则为虚拟机使用到得Native方法服务。</p>
<ul>
<li>Sun HotSpot虚拟机将本地方法栈和虚拟机栈合二为一了。</li>
<li>其所会产生与Java虚拟机栈一样异常种类</li>
</ul>
<h2 id="线程共享数据区"><a href="#线程共享数据区" class="headerlink" title="线程共享数据区"></a>线程共享数据区</h2><p>所谓线程共享数据区，是指在多线程环境下，该部分区域数据可以被所有线程所共享。主要有Java堆、方法区数据区。</p>
<h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>大多数情况下，Java堆是Java虚拟机所管理的内存中最大的一块。该内存区域被所有线程所共享。其中主要用于存放对象实例以及数组等。</p>
<ul>
<li>Java堆是垃圾收集器管理的主要区域。一般该区域又分为新生代和老年代(该部分会在Java垃圾收集器笔记中详述)。</li>
<li>当堆中无法存放最近一次产生的对象实例时便会产生OutOfMemoryError异常。</li>
</ul>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>Java方法区被各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。很多时候这部分区别被称为永久代(Permanent Generation).垃圾收集行为在这个区域比较少出现，这个区域的内存回收目标主要针对常量池的回收和对类型的卸载。</p>
<ul>
<li>当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常</li>
</ul>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池(Runtime Constant Pool)是方法区的一部分。其用于存放Java编译期生成的各种字面量和符号引用。</p>
<ul>
<li>运行期间也可能将新的常量放入常量池中，如String的intern()方法</li>
<li>当常量池无法申请到足够内存时会抛出OutOfMemoryError异常</li>
</ul>
<h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存(Direct Memory)并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。<br>JDK1.4中出现了NIO，其引入了一种基于通道(Channel)与缓冲区(Buffer)的I/O方式，它可以使用<a href="http://blog.csdn.net/gogor/article/details/6565665" target="_blank" rel="external">Native函数库</a>直接分配堆外内存，然后通过一个存储在Java堆中得DirectoryByteBuffer对象作为这块内存的引用进行操作。这样可以避免Java堆和Native堆之间的来回复制数据。</p>
<ul>
<li>当机器直接内存去除JVM内存之后的内存不能满足直接内存大小要求其，将会抛出OutOfMemoryError异常。</li>
</ul>
<hr>
<p>参考 <a href="http://item.jd.com/11252778.html" target="_blank" rel="external">深入Java虚拟机</a>/chapter02 Java内存区域与内存溢出异常</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引文&quot;&gt;&lt;a href=&quot;#引文&quot; class=&quot;headerlink&quot; title=&quot;引文&quot;&gt;&lt;/a&gt;引文&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/view/374952.htm?fr=aladdin&quot; target=&quot;_b
    
    </summary>
    
      <category term="JVM" scheme="http://wiki.jassassin.com/categories/JVM/"/>
    
    
  </entry>
  
</feed>
